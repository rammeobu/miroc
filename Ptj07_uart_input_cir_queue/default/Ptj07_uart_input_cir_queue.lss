
Ptj07_uart_input_cir_queue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800200  00000ba2  00000c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000116  00800264  00800264  00000c9a  2**0
                  ALLOC
  3 .stab         00000d20  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000152a  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000914  00000000  00000000  000032a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c47  00000000  00000000  00003bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  00004800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000429  00000000  00000000  00004b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb0  00000000  00000000  00004fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00005c65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 30 02 	jmp	0x460	; 0x460 <__vector_25>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ea       	ldi	r30, 0xA2	; 162
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 36       	cpi	r26, 0x64	; 100
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	13 e0       	ldi	r17, 0x03	; 3
 112:	a4 e6       	ldi	r26, 0x64	; 100
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	aa 37       	cpi	r26, 0x7A	; 122
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <main>
 124:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <qi_init>:
char qi[QI_SIZE],qo[QO_SIZE];
char q[Q_SIZE];
int f,r;
int fi,ri,fo,ro;
void qi_init(){
	fi=ri=fo=ro=0;
 12c:	10 92 ae 02 	sts	0x02AE, r1
 130:	10 92 ad 02 	sts	0x02AD, r1
 134:	10 92 ac 02 	sts	0x02AC, r1
 138:	10 92 ab 02 	sts	0x02AB, r1
 13c:	10 92 b0 02 	sts	0x02B0, r1
 140:	10 92 af 02 	sts	0x02AF, r1
 144:	10 92 68 02 	sts	0x0268, r1
 148:	10 92 67 02 	sts	0x0267, r1
}
 14c:	08 95       	ret

0000014e <qi_insert>:
int qi_insert(char ch){
 14e:	48 2f       	mov	r20, r24
	if((ri+1)%QI_SIZE==fi){
 150:	20 91 af 02 	lds	r18, 0x02AF
 154:	30 91 b0 02 	lds	r19, 0x02B0
 158:	2f 5f       	subi	r18, 0xFF	; 255
 15a:	3f 4f       	sbci	r19, 0xFF	; 255
 15c:	c9 01       	movw	r24, r18
 15e:	60 e4       	ldi	r22, 0x40	; 64
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	0e 94 b8 02 	call	0x570	; 0x570 <__divmodhi4>
 166:	9c 01       	movw	r18, r24
 168:	80 91 67 02 	lds	r24, 0x0267
 16c:	90 91 68 02 	lds	r25, 0x0268
 170:	28 17       	cp	r18, r24
 172:	39 07       	cpc	r19, r25
 174:	59 f0       	breq	.+22     	; 0x18c <qi_insert+0x3e>
		return(0);
	}
	ri=(ri+1)%QI_SIZE;
 176:	30 93 b0 02 	sts	0x02B0, r19
 17a:	20 93 af 02 	sts	0x02AF, r18
	qi[ri]=ch;
 17e:	2f 50       	subi	r18, 0x0F	; 15
 180:	3d 4f       	sbci	r19, 0xFD	; 253
 182:	f9 01       	movw	r30, r18
 184:	40 83       	st	Z, r20
	return(1);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	08 95       	ret
void qi_init(){
	fi=ri=fo=ro=0;
}
int qi_insert(char ch){
	if((ri+1)%QI_SIZE==fi){
		return(0);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
	}
	ri=(ri+1)%QI_SIZE;
	qi[ri]=ch;
	return(1);
	
}
 190:	08 95       	ret

00000192 <qo_insert>:
int qo_insert(char ch){
 192:	48 2f       	mov	r20, r24
	if((ro+1)%QO_SIZE==fo){
 194:	20 91 ad 02 	lds	r18, 0x02AD
 198:	30 91 ae 02 	lds	r19, 0x02AE
 19c:	2f 5f       	subi	r18, 0xFF	; 255
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
 1a0:	c9 01       	movw	r24, r18
 1a2:	60 e4       	ldi	r22, 0x40	; 64
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	0e 94 b8 02 	call	0x570	; 0x570 <__divmodhi4>
 1aa:	9c 01       	movw	r18, r24
 1ac:	80 91 ab 02 	lds	r24, 0x02AB
 1b0:	90 91 ac 02 	lds	r25, 0x02AC
 1b4:	28 17       	cp	r18, r24
 1b6:	39 07       	cpc	r19, r25
 1b8:	59 f0       	breq	.+22     	; 0x1d0 <qo_insert+0x3e>
		return(0);
	}
	ro=(ro+1)%QO_SIZE;
 1ba:	30 93 ae 02 	sts	0x02AE, r19
 1be:	20 93 ad 02 	sts	0x02AD, r18
	qo[ro]=ch;
 1c2:	25 59       	subi	r18, 0x95	; 149
 1c4:	3d 4f       	sbci	r19, 0xFD	; 253
 1c6:	f9 01       	movw	r30, r18
 1c8:	40 83       	st	Z, r20
	return(1);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	08 95       	ret
	return(1);
	
}
int qo_insert(char ch){
	if((ro+1)%QO_SIZE==fo){
		return(0);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
	}
	ro=(ro+1)%QO_SIZE;
	qo[ro]=ch;
	return(1);
	
}
 1d4:	08 95       	ret

000001d6 <qi_delete>:
int qi_delete(){
	if(ri==fi)
 1d6:	80 91 67 02 	lds	r24, 0x0267
 1da:	90 91 68 02 	lds	r25, 0x0268
 1de:	20 91 af 02 	lds	r18, 0x02AF
 1e2:	30 91 b0 02 	lds	r19, 0x02B0
 1e6:	28 17       	cp	r18, r24
 1e8:	39 07       	cpc	r19, r25
 1ea:	79 f0       	breq	.+30     	; 0x20a <qi_delete+0x34>
		return 0;
	fi=(fi+1)%QI_SIZE;
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	60 e4       	ldi	r22, 0x40	; 64
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	0e 94 b8 02 	call	0x570	; 0x570 <__divmodhi4>
 1f6:	90 93 68 02 	sts	0x0268, r25
 1fa:	80 93 67 02 	sts	0x0267, r24
	return(qi[fi]);
 1fe:	8f 50       	subi	r24, 0x0F	; 15
 200:	9d 4f       	sbci	r25, 0xFD	; 253
 202:	fc 01       	movw	r30, r24
 204:	80 81       	ld	r24, Z
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 95       	ret
	return(1);
	
}
int qi_delete(){
	if(ri==fi)
		return 0;
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
	fi=(fi+1)%QI_SIZE;
	return(qi[fi]);
}
 20e:	08 95       	ret

00000210 <qo_delete>:
int qo_delete(){
	if(ro==fo)
 210:	80 91 ab 02 	lds	r24, 0x02AB
 214:	90 91 ac 02 	lds	r25, 0x02AC
 218:	20 91 ad 02 	lds	r18, 0x02AD
 21c:	30 91 ae 02 	lds	r19, 0x02AE
 220:	28 17       	cp	r18, r24
 222:	39 07       	cpc	r19, r25
 224:	79 f0       	breq	.+30     	; 0x244 <qo_delete+0x34>
		return 0;
	fo=(fo+1)%QO_SIZE;
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	60 e4       	ldi	r22, 0x40	; 64
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	0e 94 b8 02 	call	0x570	; 0x570 <__divmodhi4>
 230:	90 93 ac 02 	sts	0x02AC, r25
 234:	80 93 ab 02 	sts	0x02AB, r24
	return(qo[fo]);
 238:	85 59       	subi	r24, 0x95	; 149
 23a:	9d 4f       	sbci	r25, 0xFD	; 253
 23c:	fc 01       	movw	r30, r24
 23e:	80 81       	ld	r24, Z
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	08 95       	ret
	fi=(fi+1)%QI_SIZE;
	return(qi[fi]);
}
int qo_delete(){
	if(ro==fo)
		return 0;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
	fo=(fo+1)%QO_SIZE;
	return(qo[fo]);
}
 248:	08 95       	ret

0000024a <led_init>:
#include <avr/io.h>
#include "led.h"
static uint8_t Leds;
void led_init(void){
	DDRL=PORTL=0xff;
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	80 93 0b 01 	sts	0x010B, r24
 250:	80 93 0a 01 	sts	0x010A, r24
}
 254:	08 95       	ret

00000256 <led_on_all>:
void led_on_all(void){
	Leds=PORTL=0x00;
 256:	10 92 0b 01 	sts	0x010B, r1
 25a:	10 92 64 02 	sts	0x0264, r1
}
 25e:	08 95       	ret

00000260 <led_off_all>:
void led_off_all(void){
	Leds=PORTL=0xff;
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	80 93 0b 01 	sts	0x010B, r24
 266:	80 93 64 02 	sts	0x0264, r24
}
 26a:	08 95       	ret

0000026c <led_on>:
void led_on(uint8_t led_no){
	Leds &=~(1<<led_no);
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <led_on+0xa>
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	8a 95       	dec	r24
 278:	e2 f7       	brpl	.-8      	; 0x272 <led_on+0x6>
 27a:	20 95       	com	r18
 27c:	80 91 64 02 	lds	r24, 0x0264
 280:	28 23       	and	r18, r24
 282:	20 93 64 02 	sts	0x0264, r18
	PORTL=Leds;
 286:	20 93 0b 01 	sts	0x010B, r18
}
 28a:	08 95       	ret

0000028c <led_off>:
void led_off(uint8_t led_no){
	Leds |=(1<<led_no);
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <led_off+0xa>
 292:	22 0f       	add	r18, r18
 294:	33 1f       	adc	r19, r19
 296:	8a 95       	dec	r24
 298:	e2 f7       	brpl	.-8      	; 0x292 <led_off+0x6>
 29a:	80 91 64 02 	lds	r24, 0x0264
 29e:	82 2b       	or	r24, r18
 2a0:	80 93 64 02 	sts	0x0264, r24
	PORTL=Leds;
 2a4:	80 93 0b 01 	sts	0x010B, r24
}
 2a8:	08 95       	ret

000002aa <led_set>:
void led_set(uint8_t led_mask){
	Leds=~led_mask;
 2aa:	80 95       	com	r24
 2ac:	80 93 64 02 	sts	0x0264, r24
	PORTL=Leds;
 2b0:	80 93 0b 01 	sts	0x010B, r24
}
 2b4:	08 95       	ret

000002b6 <uart_putchar>:
	sbi(UCSR0B,RXCIE0);
}
char buf[64];
volatile int bufi;
volatile int txend=1;
int uart_putchar(char ch, FILE * stream){
 2b6:	cf 93       	push	r28
 2b8:	c8 2f       	mov	r28, r24
	if (ch=='\n')uart_putchar('\r',stream);
 2ba:	8a 30       	cpi	r24, 0x0A	; 10
 2bc:	19 f4       	brne	.+6      	; 0x2c4 <uart_putchar+0xe>
 2be:	8d e0       	ldi	r24, 0x0D	; 13
 2c0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <uart_putchar>
	cli();
 2c4:	f8 94       	cli
	if(!uart_busy){
 2c6:	80 91 33 03 	lds	r24, 0x0333
 2ca:	88 23       	and	r24, r24
 2cc:	59 f4       	brne	.+22     	; 0x2e4 <uart_putchar+0x2e>
		UDR0=ch;
 2ce:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy=1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 33 03 	sts	0x0333, r24
 2d8:	0a c0       	rjmp	.+20     	; 0x2ee <uart_putchar+0x38>
	}
	else{
		while(qo_insert(ch)==0){
			sei();
 2da:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	86 ef       	ldi	r24, 0xF6	; 246
 2de:	8a 95       	dec	r24
 2e0:	f1 f7       	brne	.-4      	; 0x2de <uart_putchar+0x28>
			_delay_us(100);
			cli();
 2e2:	f8 94       	cli
	if(!uart_busy){
		UDR0=ch;
		uart_busy=1;
	}
	else{
		while(qo_insert(ch)==0){
 2e4:	8c 2f       	mov	r24, r28
 2e6:	0e 94 c9 00 	call	0x192	; 0x192 <qo_insert>
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	b1 f3       	breq	.-20     	; 0x2da <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
 2ee:	78 94       	sei
	return (1);
}
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <uart_init>:
#include "uart.h"
#define EOT 0x04
FILE Mystdout = FDEV_SETUP_STREAM(uart_putchar,NULL,_FDEV_SETUP_WRITE);
char uart_busy;
void uart_init(void){
	stdout=&Mystdout;
 2f8:	86 e5       	ldi	r24, 0x56	; 86
 2fa:	92 e0       	ldi	r25, 0x02	; 2
 2fc:	90 93 77 03 	sts	0x0377, r25
 300:	80 93 76 03 	sts	0x0376, r24
	qi_init();
 304:	0e 94 96 00 	call	0x12c	; 0x12c <qi_init>
	uart_busy=0;
 308:	10 92 33 03 	sts	0x0333, r1
	UBRR0H=0x00;UBRR0L=0x07;
 30c:	10 92 c5 00 	sts	0x00C5, r1
 310:	87 e0       	ldi	r24, 0x07	; 7
 312:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A,U2X0);
 316:	e0 ec       	ldi	r30, 0xC0	; 192
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	80 83       	st	Z, r24
	sbi(UCSR0B,TXEN0);
 320:	e1 ec       	ldi	r30, 0xC1	; 193
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	88 60       	ori	r24, 0x08	; 8
 328:	80 83       	st	Z, r24
	sbi(UCSR0B,TXCIE0);
 32a:	80 81       	ld	r24, Z
 32c:	80 64       	ori	r24, 0x40	; 64
 32e:	80 83       	st	Z, r24
	sbi(UCSR0B,RXEN0);
 330:	80 81       	ld	r24, Z
 332:	80 61       	ori	r24, 0x10	; 16
 334:	80 83       	st	Z, r24
	sbi(UCSR0B,RXCIE0);
 336:	80 81       	ld	r24, Z
 338:	80 68       	ori	r24, 0x80	; 128
 33a:	80 83       	st	Z, r24
}
 33c:	08 95       	ret

0000033e <is_prime>:
	}
	sei();
	return (1);
}

int is_prime(int n){
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	fc 01       	movw	r30, r24
		int i;
		for (i=2;i<=n/2;i++){
 344:	62 e0       	ldi	r22, 0x02	; 2
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	0e 94 b8 02 	call	0x570	; 0x570 <__divmodhi4>
 34c:	eb 01       	movw	r28, r22
 34e:	22 e0       	ldi	r18, 0x02	; 2
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	08 c0       	rjmp	.+16     	; 0x364 <is_prime+0x26>
			if((n%i)==0)return(0);	
 354:	cf 01       	movw	r24, r30
 356:	b9 01       	movw	r22, r18
 358:	0e 94 b8 02 	call	0x570	; 0x570 <__divmodhi4>
 35c:	00 97       	sbiw	r24, 0x00	; 0
 35e:	41 f0       	breq	.+16     	; 0x370 <is_prime+0x32>
	return (1);
}

int is_prime(int n){
		int i;
		for (i=2;i<=n/2;i++){
 360:	2f 5f       	subi	r18, 0xFF	; 255
 362:	3f 4f       	sbci	r19, 0xFF	; 255
 364:	c2 17       	cp	r28, r18
 366:	d3 07       	cpc	r29, r19
 368:	ac f7       	brge	.-22     	; 0x354 <is_prime+0x16>
			if((n%i)==0)return(0);	
		}
		return(1);
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <is_prime+0x36>
}

int is_prime(int n){
		int i;
		for (i=2;i<=n/2;i++){
			if((n%i)==0)return(0);	
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
		}
		return(1);
}
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <app_prime>:
void app_prime(int t){
 37a:	cf 92       	push	r12
 37c:	df 92       	push	r13
 37e:	ef 92       	push	r14
 380:	ff 92       	push	r15
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	7c 01       	movw	r14, r24
	int n, count=0;
 38c:	00 e0       	ldi	r16, 0x00	; 0
 38e:	10 e0       	ldi	r17, 0x00	; 0
	for(n=2;n<=t;n++){
 390:	c2 e0       	ldi	r28, 0x02	; 2
 392:	d0 e0       	ldi	r29, 0x00	; 0
	if(is_prime(n)){
			count++;
			printf("%d is a prime number\n",n);
 394:	24 e3       	ldi	r18, 0x34	; 52
 396:	c2 2e       	mov	r12, r18
 398:	22 e0       	ldi	r18, 0x02	; 2
 39a:	d2 2e       	mov	r13, r18
		}
		return(1);
}
void app_prime(int t){
	int n, count=0;
	for(n=2;n<=t;n++){
 39c:	16 c0       	rjmp	.+44     	; 0x3ca <app_prime+0x50>
	if(is_prime(n)){
 39e:	ce 01       	movw	r24, r28
 3a0:	0e 94 9f 01 	call	0x33e	; 0x33e <is_prime>
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	81 f0       	breq	.+32     	; 0x3c8 <app_prime+0x4e>
			count++;
 3a8:	0f 5f       	subi	r16, 0xFF	; 255
 3aa:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number\n",n);
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <app_prime+0x34>
 3ae:	0f 92       	push	r0
 3b0:	ed b7       	in	r30, 0x3d	; 61
 3b2:	fe b7       	in	r31, 0x3e	; 62
 3b4:	d2 82       	std	Z+2, r13	; 0x02
 3b6:	c1 82       	std	Z+1, r12	; 0x01
 3b8:	d4 83       	std	Z+4, r29	; 0x04
 3ba:	c3 83       	std	Z+3, r28	; 0x03
 3bc:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <printf>
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
		}
		return(1);
}
void app_prime(int t){
	int n, count=0;
	for(n=2;n<=t;n++){
 3c8:	21 96       	adiw	r28, 0x01	; 1
 3ca:	ec 16       	cp	r14, r28
 3cc:	fd 06       	cpc	r15, r29
 3ce:	3c f7       	brge	.-50     	; 0x39e <app_prime+0x24>
	if(is_prime(n)){
			count++;
			printf("%d is a prime number\n",n);
		}
	}
	printf("count=%d\n",count);
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <app_prime+0x58>
 3d2:	0f 92       	push	r0
 3d4:	8a e4       	ldi	r24, 0x4A	; 74
 3d6:	92 e0       	ldi	r25, 0x02	; 2
 3d8:	ed b7       	in	r30, 0x3d	; 61
 3da:	fe b7       	in	r31, 0x3e	; 62
 3dc:	92 83       	std	Z+2, r25	; 0x02
 3de:	81 83       	std	Z+1, r24	; 0x01
 3e0:	14 83       	std	Z+4, r17	; 0x04
 3e2:	03 83       	std	Z+3, r16	; 0x03
 3e4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <printf>
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	ff 90       	pop	r15
 3fa:	ef 90       	pop	r14
 3fc:	df 90       	pop	r13
 3fe:	cf 90       	pop	r12
 400:	08 95       	ret

00000402 <__vector_27>:

ISR(USART0_TX_vect){
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	0b b6       	in	r0, 0x3b	; 59
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	2f 93       	push	r18
 412:	3f 93       	push	r19
 414:	4f 93       	push	r20
 416:	5f 93       	push	r21
 418:	6f 93       	push	r22
 41a:	7f 93       	push	r23
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	af 93       	push	r26
 422:	bf 93       	push	r27
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
	char ch ;
	if((ch=qo_delete())==0)
 428:	0e 94 08 01 	call	0x210	; 0x210 <qo_delete>
 42c:	88 23       	and	r24, r24
 42e:	19 f4       	brne	.+6      	; 0x436 <__vector_27+0x34>
		uart_busy=0;
 430:	10 92 33 03 	sts	0x0333, r1
 434:	02 c0       	rjmp	.+4      	; 0x43a <__vector_27+0x38>
	else
		UDR0=ch;	
 436:	80 93 c6 00 	sts	0x00C6, r24
}
 43a:	ff 91       	pop	r31
 43c:	ef 91       	pop	r30
 43e:	bf 91       	pop	r27
 440:	af 91       	pop	r26
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	7f 91       	pop	r23
 448:	6f 91       	pop	r22
 44a:	5f 91       	pop	r21
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0b be       	out	0x3b, r0	; 59
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <__vector_25>:

ISR(USART0_RX_vect){
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	0b b6       	in	r0, 0x3b	; 59
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	2f 93       	push	r18
 470:	3f 93       	push	r19
 472:	4f 93       	push	r20
 474:	5f 93       	push	r21
 476:	6f 93       	push	r22
 478:	7f 93       	push	r23
 47a:	8f 93       	push	r24
 47c:	9f 93       	push	r25
 47e:	af 93       	push	r26
 480:	bf 93       	push	r27
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
	char ch;
	ch=UDR0;
 486:	80 91 c6 00 	lds	r24, 0x00C6
	qi_insert(ch);	
 48a:	0e 94 a7 00 	call	0x14e	; 0x14e <qi_insert>
}
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	0f 90       	pop	r0
 4a8:	0b be       	out	0x3b, r0	; 59
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <main>:
#include "uart.h"
#include <avr/interrupt.h>
#include <stdlib.h>
#include <string.h>
#include "Circular_Queue.h"
int main(){
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	c0 58       	subi	r28, 0x80	; 128
 4be:	d0 40       	sbci	r29, 0x00	; 0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	cd bf       	out	0x3d, r28	; 61
	char cmd[128],ch;
	int n=0;
	uart_init();
 4ca:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <uart_init>
	sei();
 4ce:	78 94       	sei
	printf("$ ");
 4d0:	0f 92       	push	r0
 4d2:	0f 92       	push	r0
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	e8 2e       	mov	r14, r24
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	f8 2e       	mov	r15, r24
 4dc:	ed b7       	in	r30, 0x3d	; 61
 4de:	fe b7       	in	r31, 0x3e	; 62
 4e0:	f2 82       	std	Z+2, r15	; 0x02
 4e2:	e1 82       	std	Z+1, r14	; 0x01
 4e4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <printf>
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
#include <stdlib.h>
#include <string.h>
#include "Circular_Queue.h"
int main(){
	char cmd[128],ch;
	int n=0;
 4ec:	00 e0       	ldi	r16, 0x00	; 0
 4ee:	10 e0       	ldi	r17, 0x00	; 0
				if(!strcmp(cmd,"app")) {app_prime(2000);
				}else if(!strcmp(cmd,"hi")) {printf("hi my name is kimunseong\n");
				}
				else 	printf("Unknon command..\n");
				n=0;
				printf("$ ");
 4f0:	de 2c       	mov	r13, r14
 4f2:	ef 2c       	mov	r14, r15
	int n=0;
	uart_init();
	sei();
	printf("$ ");
	while(1){
		cli();
 4f4:	f8 94       	cli
		ch=qi_delete();
 4f6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <qi_delete>
		sei();
 4fa:	78 94       	sei
		if(ch){
 4fc:	88 23       	and	r24, r24
 4fe:	d1 f3       	breq	.-12     	; 0x4f4 <main+0x40>
			if(ch=='\r')continue;
 500:	8d 30       	cpi	r24, 0x0D	; 13
 502:	c1 f3       	breq	.-16     	; 0x4f4 <main+0x40>
			if(ch=='\n'){
				cmd[n]=0;
 504:	e1 e0       	ldi	r30, 0x01	; 1
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	ec 0f       	add	r30, r28
 50a:	fd 1f       	adc	r31, r29
 50c:	e0 0f       	add	r30, r16
 50e:	f1 1f       	adc	r31, r17
		cli();
		ch=qi_delete();
		sei();
		if(ch){
			if(ch=='\r')continue;
			if(ch=='\n'){
 510:	8a 30       	cpi	r24, 0x0A	; 10
 512:	51 f5       	brne	.+84     	; 0x568 <main+0xb4>
				cmd[n]=0;
 514:	10 82       	st	Z, r1
				if(!strcmp(cmd,"app")) {app_prime(2000);
 516:	ce 01       	movw	r24, r28
 518:	01 96       	adiw	r24, 0x01	; 1
 51a:	63 e0       	ldi	r22, 0x03	; 3
 51c:	72 e0       	ldi	r23, 0x02	; 2
 51e:	0e 94 df 02 	call	0x5be	; 0x5be <strcmp>
 522:	00 97       	sbiw	r24, 0x00	; 0
 524:	29 f4       	brne	.+10     	; 0x530 <main+0x7c>
 526:	80 ed       	ldi	r24, 0xD0	; 208
 528:	97 e0       	ldi	r25, 0x07	; 7
 52a:	0e 94 bd 01 	call	0x37a	; 0x37a <app_prime>
 52e:	0f c0       	rjmp	.+30     	; 0x54e <main+0x9a>
				}else if(!strcmp(cmd,"hi")) {printf("hi my name is kimunseong\n");
 530:	ce 01       	movw	r24, r28
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	67 e0       	ldi	r22, 0x07	; 7
 536:	72 e0       	ldi	r23, 0x02	; 2
 538:	0e 94 df 02 	call	0x5be	; 0x5be <strcmp>
 53c:	00 97       	sbiw	r24, 0x00	; 0
 53e:	19 f4       	brne	.+6      	; 0x546 <main+0x92>
 540:	8a e0       	ldi	r24, 0x0A	; 10
 542:	92 e0       	ldi	r25, 0x02	; 2
 544:	02 c0       	rjmp	.+4      	; 0x54a <main+0x96>
				}
				else 	printf("Unknon command..\n");
 546:	83 e2       	ldi	r24, 0x23	; 35
 548:	92 e0       	ldi	r25, 0x02	; 2
 54a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <puts>
				n=0;
				printf("$ ");
 54e:	0f 92       	push	r0
 550:	0f 92       	push	r0
 552:	ed b7       	in	r30, 0x3d	; 61
 554:	fe b7       	in	r31, 0x3e	; 62
 556:	d1 82       	std	Z+1, r13	; 0x01
 558:	e2 82       	std	Z+2, r14	; 0x02
 55a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <printf>
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
				cmd[n]=0;
				if(!strcmp(cmd,"app")) {app_prime(2000);
				}else if(!strcmp(cmd,"hi")) {printf("hi my name is kimunseong\n");
				}
				else 	printf("Unknon command..\n");
				n=0;
 562:	00 e0       	ldi	r16, 0x00	; 0
 564:	10 e0       	ldi	r17, 0x00	; 0
 566:	c6 cf       	rjmp	.-116    	; 0x4f4 <main+0x40>
				printf("$ ");
			}else{
				cmd[n++]=ch;
 568:	80 83       	st	Z, r24
 56a:	0f 5f       	subi	r16, 0xFF	; 255
 56c:	1f 4f       	sbci	r17, 0xFF	; 255
 56e:	c2 cf       	rjmp	.-124    	; 0x4f4 <main+0x40>

00000570 <__divmodhi4>:
 570:	97 fb       	bst	r25, 7
 572:	09 2e       	mov	r0, r25
 574:	07 26       	eor	r0, r23
 576:	0a d0       	rcall	.+20     	; 0x58c <__divmodhi4_neg1>
 578:	77 fd       	sbrc	r23, 7
 57a:	04 d0       	rcall	.+8      	; 0x584 <__divmodhi4_neg2>
 57c:	0c d0       	rcall	.+24     	; 0x596 <__udivmodhi4>
 57e:	06 d0       	rcall	.+12     	; 0x58c <__divmodhi4_neg1>
 580:	00 20       	and	r0, r0
 582:	1a f4       	brpl	.+6      	; 0x58a <__divmodhi4_exit>

00000584 <__divmodhi4_neg2>:
 584:	70 95       	com	r23
 586:	61 95       	neg	r22
 588:	7f 4f       	sbci	r23, 0xFF	; 255

0000058a <__divmodhi4_exit>:
 58a:	08 95       	ret

0000058c <__divmodhi4_neg1>:
 58c:	f6 f7       	brtc	.-4      	; 0x58a <__divmodhi4_exit>
 58e:	90 95       	com	r25
 590:	81 95       	neg	r24
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	08 95       	ret

00000596 <__udivmodhi4>:
 596:	aa 1b       	sub	r26, r26
 598:	bb 1b       	sub	r27, r27
 59a:	51 e1       	ldi	r21, 0x11	; 17
 59c:	07 c0       	rjmp	.+14     	; 0x5ac <__udivmodhi4_ep>

0000059e <__udivmodhi4_loop>:
 59e:	aa 1f       	adc	r26, r26
 5a0:	bb 1f       	adc	r27, r27
 5a2:	a6 17       	cp	r26, r22
 5a4:	b7 07       	cpc	r27, r23
 5a6:	10 f0       	brcs	.+4      	; 0x5ac <__udivmodhi4_ep>
 5a8:	a6 1b       	sub	r26, r22
 5aa:	b7 0b       	sbc	r27, r23

000005ac <__udivmodhi4_ep>:
 5ac:	88 1f       	adc	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	5a 95       	dec	r21
 5b2:	a9 f7       	brne	.-22     	; 0x59e <__udivmodhi4_loop>
 5b4:	80 95       	com	r24
 5b6:	90 95       	com	r25
 5b8:	bc 01       	movw	r22, r24
 5ba:	cd 01       	movw	r24, r26
 5bc:	08 95       	ret

000005be <strcmp>:
 5be:	fb 01       	movw	r30, r22
 5c0:	dc 01       	movw	r26, r24
 5c2:	8d 91       	ld	r24, X+
 5c4:	01 90       	ld	r0, Z+
 5c6:	80 19       	sub	r24, r0
 5c8:	01 10       	cpse	r0, r1
 5ca:	d9 f3       	breq	.-10     	; 0x5c2 <strcmp+0x4>
 5cc:	99 0b       	sbc	r25, r25
 5ce:	08 95       	ret

000005d0 <printf>:
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
 5d8:	fe 01       	movw	r30, r28
 5da:	36 96       	adiw	r30, 0x06	; 6
 5dc:	61 91       	ld	r22, Z+
 5de:	71 91       	ld	r23, Z+
 5e0:	80 91 76 03 	lds	r24, 0x0376
 5e4:	90 91 77 03 	lds	r25, 0x0377
 5e8:	af 01       	movw	r20, r30
 5ea:	0e 94 28 03 	call	0x650	; 0x650 <vfprintf>
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <puts>:
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	8c 01       	movw	r16, r24
 5fe:	e0 91 76 03 	lds	r30, 0x0376
 602:	f0 91 77 03 	lds	r31, 0x0377
 606:	83 81       	ldd	r24, Z+3	; 0x03
 608:	81 ff       	sbrs	r24, 1
 60a:	1a c0       	rjmp	.+52     	; 0x640 <puts+0x4c>
 60c:	c0 e0       	ldi	r28, 0x00	; 0
 60e:	d0 e0       	ldi	r29, 0x00	; 0
 610:	05 c0       	rjmp	.+10     	; 0x61c <puts+0x28>
 612:	19 95       	eicall
 614:	00 97       	sbiw	r24, 0x00	; 0
 616:	11 f0       	breq	.+4      	; 0x61c <puts+0x28>
 618:	cf ef       	ldi	r28, 0xFF	; 255
 61a:	df ef       	ldi	r29, 0xFF	; 255
 61c:	f8 01       	movw	r30, r16
 61e:	81 91       	ld	r24, Z+
 620:	8f 01       	movw	r16, r30
 622:	60 91 76 03 	lds	r22, 0x0376
 626:	70 91 77 03 	lds	r23, 0x0377
 62a:	db 01       	movw	r26, r22
 62c:	18 96       	adiw	r26, 0x08	; 8
 62e:	ed 91       	ld	r30, X+
 630:	fc 91       	ld	r31, X
 632:	19 97       	sbiw	r26, 0x09	; 9
 634:	88 23       	and	r24, r24
 636:	69 f7       	brne	.-38     	; 0x612 <puts+0x1e>
 638:	8a e0       	ldi	r24, 0x0A	; 10
 63a:	19 95       	eicall
 63c:	00 97       	sbiw	r24, 0x00	; 0
 63e:	11 f0       	breq	.+4      	; 0x644 <puts+0x50>
 640:	cf ef       	ldi	r28, 0xFF	; 255
 642:	df ef       	ldi	r29, 0xFF	; 255
 644:	ce 01       	movw	r24, r28
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	1f 91       	pop	r17
 64c:	0f 91       	pop	r16
 64e:	08 95       	ret

00000650 <vfprintf>:
 650:	2f 92       	push	r2
 652:	3f 92       	push	r3
 654:	4f 92       	push	r4
 656:	5f 92       	push	r5
 658:	6f 92       	push	r6
 65a:	7f 92       	push	r7
 65c:	8f 92       	push	r8
 65e:	9f 92       	push	r9
 660:	af 92       	push	r10
 662:	bf 92       	push	r11
 664:	cf 92       	push	r12
 666:	df 92       	push	r13
 668:	ef 92       	push	r14
 66a:	ff 92       	push	r15
 66c:	0f 93       	push	r16
 66e:	1f 93       	push	r17
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	2d 97       	sbiw	r28, 0x0d	; 13
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	f8 94       	cli
 67e:	de bf       	out	0x3e, r29	; 62
 680:	0f be       	out	0x3f, r0	; 63
 682:	cd bf       	out	0x3d, r28	; 61
 684:	3c 01       	movw	r6, r24
 686:	7d 87       	std	Y+13, r23	; 0x0d
 688:	6c 87       	std	Y+12, r22	; 0x0c
 68a:	5a 01       	movw	r10, r20
 68c:	fc 01       	movw	r30, r24
 68e:	17 82       	std	Z+7, r1	; 0x07
 690:	16 82       	std	Z+6, r1	; 0x06
 692:	83 81       	ldd	r24, Z+3	; 0x03
 694:	81 ff       	sbrs	r24, 1
 696:	c8 c1       	rjmp	.+912    	; 0xa28 <vfprintf+0x3d8>
 698:	2e 01       	movw	r4, r28
 69a:	08 94       	sec
 69c:	41 1c       	adc	r4, r1
 69e:	51 1c       	adc	r5, r1
 6a0:	f3 01       	movw	r30, r6
 6a2:	93 81       	ldd	r25, Z+3	; 0x03
 6a4:	ec 85       	ldd	r30, Y+12	; 0x0c
 6a6:	fd 85       	ldd	r31, Y+13	; 0x0d
 6a8:	93 fd       	sbrc	r25, 3
 6aa:	85 91       	lpm	r24, Z+
 6ac:	93 ff       	sbrs	r25, 3
 6ae:	81 91       	ld	r24, Z+
 6b0:	fd 87       	std	Y+13, r31	; 0x0d
 6b2:	ec 87       	std	Y+12, r30	; 0x0c
 6b4:	88 23       	and	r24, r24
 6b6:	09 f4       	brne	.+2      	; 0x6ba <vfprintf+0x6a>
 6b8:	b3 c1       	rjmp	.+870    	; 0xa20 <vfprintf+0x3d0>
 6ba:	85 32       	cpi	r24, 0x25	; 37
 6bc:	41 f4       	brne	.+16     	; 0x6ce <vfprintf+0x7e>
 6be:	93 fd       	sbrc	r25, 3
 6c0:	85 91       	lpm	r24, Z+
 6c2:	93 ff       	sbrs	r25, 3
 6c4:	81 91       	ld	r24, Z+
 6c6:	fd 87       	std	Y+13, r31	; 0x0d
 6c8:	ec 87       	std	Y+12, r30	; 0x0c
 6ca:	85 32       	cpi	r24, 0x25	; 37
 6cc:	29 f4       	brne	.+10     	; 0x6d8 <vfprintf+0x88>
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	b3 01       	movw	r22, r6
 6d2:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 6d6:	e4 cf       	rjmp	.-56     	; 0x6a0 <vfprintf+0x50>
 6d8:	ff 24       	eor	r15, r15
 6da:	ee 24       	eor	r14, r14
 6dc:	10 e0       	ldi	r17, 0x00	; 0
 6de:	10 32       	cpi	r17, 0x20	; 32
 6e0:	b0 f4       	brcc	.+44     	; 0x70e <vfprintf+0xbe>
 6e2:	8b 32       	cpi	r24, 0x2B	; 43
 6e4:	69 f0       	breq	.+26     	; 0x700 <vfprintf+0xb0>
 6e6:	8c 32       	cpi	r24, 0x2C	; 44
 6e8:	28 f4       	brcc	.+10     	; 0x6f4 <vfprintf+0xa4>
 6ea:	80 32       	cpi	r24, 0x20	; 32
 6ec:	51 f0       	breq	.+20     	; 0x702 <vfprintf+0xb2>
 6ee:	83 32       	cpi	r24, 0x23	; 35
 6f0:	71 f4       	brne	.+28     	; 0x70e <vfprintf+0xbe>
 6f2:	0b c0       	rjmp	.+22     	; 0x70a <vfprintf+0xba>
 6f4:	8d 32       	cpi	r24, 0x2D	; 45
 6f6:	39 f0       	breq	.+14     	; 0x706 <vfprintf+0xb6>
 6f8:	80 33       	cpi	r24, 0x30	; 48
 6fa:	49 f4       	brne	.+18     	; 0x70e <vfprintf+0xbe>
 6fc:	11 60       	ori	r17, 0x01	; 1
 6fe:	2c c0       	rjmp	.+88     	; 0x758 <vfprintf+0x108>
 700:	12 60       	ori	r17, 0x02	; 2
 702:	14 60       	ori	r17, 0x04	; 4
 704:	29 c0       	rjmp	.+82     	; 0x758 <vfprintf+0x108>
 706:	18 60       	ori	r17, 0x08	; 8
 708:	27 c0       	rjmp	.+78     	; 0x758 <vfprintf+0x108>
 70a:	10 61       	ori	r17, 0x10	; 16
 70c:	25 c0       	rjmp	.+74     	; 0x758 <vfprintf+0x108>
 70e:	17 fd       	sbrc	r17, 7
 710:	2e c0       	rjmp	.+92     	; 0x76e <vfprintf+0x11e>
 712:	28 2f       	mov	r18, r24
 714:	20 53       	subi	r18, 0x30	; 48
 716:	2a 30       	cpi	r18, 0x0A	; 10
 718:	98 f4       	brcc	.+38     	; 0x740 <vfprintf+0xf0>
 71a:	16 ff       	sbrs	r17, 6
 71c:	08 c0       	rjmp	.+16     	; 0x72e <vfprintf+0xde>
 71e:	8f 2d       	mov	r24, r15
 720:	88 0f       	add	r24, r24
 722:	f8 2e       	mov	r15, r24
 724:	ff 0c       	add	r15, r15
 726:	ff 0c       	add	r15, r15
 728:	f8 0e       	add	r15, r24
 72a:	f2 0e       	add	r15, r18
 72c:	15 c0       	rjmp	.+42     	; 0x758 <vfprintf+0x108>
 72e:	8e 2d       	mov	r24, r14
 730:	88 0f       	add	r24, r24
 732:	e8 2e       	mov	r14, r24
 734:	ee 0c       	add	r14, r14
 736:	ee 0c       	add	r14, r14
 738:	e8 0e       	add	r14, r24
 73a:	e2 0e       	add	r14, r18
 73c:	10 62       	ori	r17, 0x20	; 32
 73e:	0c c0       	rjmp	.+24     	; 0x758 <vfprintf+0x108>
 740:	8e 32       	cpi	r24, 0x2E	; 46
 742:	21 f4       	brne	.+8      	; 0x74c <vfprintf+0xfc>
 744:	16 fd       	sbrc	r17, 6
 746:	6c c1       	rjmp	.+728    	; 0xa20 <vfprintf+0x3d0>
 748:	10 64       	ori	r17, 0x40	; 64
 74a:	06 c0       	rjmp	.+12     	; 0x758 <vfprintf+0x108>
 74c:	8c 36       	cpi	r24, 0x6C	; 108
 74e:	11 f4       	brne	.+4      	; 0x754 <vfprintf+0x104>
 750:	10 68       	ori	r17, 0x80	; 128
 752:	02 c0       	rjmp	.+4      	; 0x758 <vfprintf+0x108>
 754:	88 36       	cpi	r24, 0x68	; 104
 756:	59 f4       	brne	.+22     	; 0x76e <vfprintf+0x11e>
 758:	ec 85       	ldd	r30, Y+12	; 0x0c
 75a:	fd 85       	ldd	r31, Y+13	; 0x0d
 75c:	93 fd       	sbrc	r25, 3
 75e:	85 91       	lpm	r24, Z+
 760:	93 ff       	sbrs	r25, 3
 762:	81 91       	ld	r24, Z+
 764:	fd 87       	std	Y+13, r31	; 0x0d
 766:	ec 87       	std	Y+12, r30	; 0x0c
 768:	88 23       	and	r24, r24
 76a:	09 f0       	breq	.+2      	; 0x76e <vfprintf+0x11e>
 76c:	b8 cf       	rjmp	.-144    	; 0x6de <vfprintf+0x8e>
 76e:	98 2f       	mov	r25, r24
 770:	95 54       	subi	r25, 0x45	; 69
 772:	93 30       	cpi	r25, 0x03	; 3
 774:	18 f0       	brcs	.+6      	; 0x77c <vfprintf+0x12c>
 776:	90 52       	subi	r25, 0x20	; 32
 778:	93 30       	cpi	r25, 0x03	; 3
 77a:	38 f4       	brcc	.+14     	; 0x78a <vfprintf+0x13a>
 77c:	24 e0       	ldi	r18, 0x04	; 4
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	a2 0e       	add	r10, r18
 782:	b3 1e       	adc	r11, r19
 784:	3f e3       	ldi	r19, 0x3F	; 63
 786:	39 83       	std	Y+1, r19	; 0x01
 788:	0f c0       	rjmp	.+30     	; 0x7a8 <vfprintf+0x158>
 78a:	83 36       	cpi	r24, 0x63	; 99
 78c:	31 f0       	breq	.+12     	; 0x79a <vfprintf+0x14a>
 78e:	83 37       	cpi	r24, 0x73	; 115
 790:	81 f0       	breq	.+32     	; 0x7b2 <vfprintf+0x162>
 792:	83 35       	cpi	r24, 0x53	; 83
 794:	09 f0       	breq	.+2      	; 0x798 <vfprintf+0x148>
 796:	5a c0       	rjmp	.+180    	; 0x84c <vfprintf+0x1fc>
 798:	22 c0       	rjmp	.+68     	; 0x7de <vfprintf+0x18e>
 79a:	f5 01       	movw	r30, r10
 79c:	80 81       	ld	r24, Z
 79e:	89 83       	std	Y+1, r24	; 0x01
 7a0:	22 e0       	ldi	r18, 0x02	; 2
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	a2 0e       	add	r10, r18
 7a6:	b3 1e       	adc	r11, r19
 7a8:	21 e0       	ldi	r18, 0x01	; 1
 7aa:	c2 2e       	mov	r12, r18
 7ac:	d1 2c       	mov	r13, r1
 7ae:	42 01       	movw	r8, r4
 7b0:	14 c0       	rjmp	.+40     	; 0x7da <vfprintf+0x18a>
 7b2:	92 e0       	ldi	r25, 0x02	; 2
 7b4:	29 2e       	mov	r2, r25
 7b6:	31 2c       	mov	r3, r1
 7b8:	2a 0c       	add	r2, r10
 7ba:	3b 1c       	adc	r3, r11
 7bc:	f5 01       	movw	r30, r10
 7be:	80 80       	ld	r8, Z
 7c0:	91 80       	ldd	r9, Z+1	; 0x01
 7c2:	16 ff       	sbrs	r17, 6
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <vfprintf+0x17c>
 7c6:	6f 2d       	mov	r22, r15
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <vfprintf+0x180>
 7cc:	6f ef       	ldi	r22, 0xFF	; 255
 7ce:	7f ef       	ldi	r23, 0xFF	; 255
 7d0:	c4 01       	movw	r24, r8
 7d2:	0e 94 3a 05 	call	0xa74	; 0xa74 <strnlen>
 7d6:	6c 01       	movw	r12, r24
 7d8:	51 01       	movw	r10, r2
 7da:	1f 77       	andi	r17, 0x7F	; 127
 7dc:	15 c0       	rjmp	.+42     	; 0x808 <vfprintf+0x1b8>
 7de:	82 e0       	ldi	r24, 0x02	; 2
 7e0:	28 2e       	mov	r2, r24
 7e2:	31 2c       	mov	r3, r1
 7e4:	2a 0c       	add	r2, r10
 7e6:	3b 1c       	adc	r3, r11
 7e8:	f5 01       	movw	r30, r10
 7ea:	80 80       	ld	r8, Z
 7ec:	91 80       	ldd	r9, Z+1	; 0x01
 7ee:	16 ff       	sbrs	r17, 6
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <vfprintf+0x1a8>
 7f2:	6f 2d       	mov	r22, r15
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <vfprintf+0x1ac>
 7f8:	6f ef       	ldi	r22, 0xFF	; 255
 7fa:	7f ef       	ldi	r23, 0xFF	; 255
 7fc:	c4 01       	movw	r24, r8
 7fe:	0e 94 2f 05 	call	0xa5e	; 0xa5e <strnlen_P>
 802:	6c 01       	movw	r12, r24
 804:	10 68       	ori	r17, 0x80	; 128
 806:	51 01       	movw	r10, r2
 808:	13 fd       	sbrc	r17, 3
 80a:	1c c0       	rjmp	.+56     	; 0x844 <vfprintf+0x1f4>
 80c:	06 c0       	rjmp	.+12     	; 0x81a <vfprintf+0x1ca>
 80e:	80 e2       	ldi	r24, 0x20	; 32
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	b3 01       	movw	r22, r6
 814:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 818:	ea 94       	dec	r14
 81a:	8e 2d       	mov	r24, r14
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	c8 16       	cp	r12, r24
 820:	d9 06       	cpc	r13, r25
 822:	a8 f3       	brcs	.-22     	; 0x80e <vfprintf+0x1be>
 824:	0f c0       	rjmp	.+30     	; 0x844 <vfprintf+0x1f4>
 826:	f4 01       	movw	r30, r8
 828:	17 fd       	sbrc	r17, 7
 82a:	85 91       	lpm	r24, Z+
 82c:	17 ff       	sbrs	r17, 7
 82e:	81 91       	ld	r24, Z+
 830:	4f 01       	movw	r8, r30
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	b3 01       	movw	r22, r6
 836:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 83a:	e1 10       	cpse	r14, r1
 83c:	ea 94       	dec	r14
 83e:	08 94       	sec
 840:	c1 08       	sbc	r12, r1
 842:	d1 08       	sbc	r13, r1
 844:	c1 14       	cp	r12, r1
 846:	d1 04       	cpc	r13, r1
 848:	71 f7       	brne	.-36     	; 0x826 <vfprintf+0x1d6>
 84a:	e7 c0       	rjmp	.+462    	; 0xa1a <vfprintf+0x3ca>
 84c:	84 36       	cpi	r24, 0x64	; 100
 84e:	11 f0       	breq	.+4      	; 0x854 <vfprintf+0x204>
 850:	89 36       	cpi	r24, 0x69	; 105
 852:	51 f5       	brne	.+84     	; 0x8a8 <vfprintf+0x258>
 854:	f5 01       	movw	r30, r10
 856:	17 ff       	sbrs	r17, 7
 858:	07 c0       	rjmp	.+14     	; 0x868 <vfprintf+0x218>
 85a:	80 81       	ld	r24, Z
 85c:	91 81       	ldd	r25, Z+1	; 0x01
 85e:	a2 81       	ldd	r26, Z+2	; 0x02
 860:	b3 81       	ldd	r27, Z+3	; 0x03
 862:	24 e0       	ldi	r18, 0x04	; 4
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	08 c0       	rjmp	.+16     	; 0x878 <vfprintf+0x228>
 868:	80 81       	ld	r24, Z
 86a:	91 81       	ldd	r25, Z+1	; 0x01
 86c:	aa 27       	eor	r26, r26
 86e:	97 fd       	sbrc	r25, 7
 870:	a0 95       	com	r26
 872:	ba 2f       	mov	r27, r26
 874:	22 e0       	ldi	r18, 0x02	; 2
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	a2 0e       	add	r10, r18
 87a:	b3 1e       	adc	r11, r19
 87c:	01 2f       	mov	r16, r17
 87e:	0f 76       	andi	r16, 0x6F	; 111
 880:	b7 ff       	sbrs	r27, 7
 882:	08 c0       	rjmp	.+16     	; 0x894 <vfprintf+0x244>
 884:	b0 95       	com	r27
 886:	a0 95       	com	r26
 888:	90 95       	com	r25
 88a:	81 95       	neg	r24
 88c:	9f 4f       	sbci	r25, 0xFF	; 255
 88e:	af 4f       	sbci	r26, 0xFF	; 255
 890:	bf 4f       	sbci	r27, 0xFF	; 255
 892:	00 68       	ori	r16, 0x80	; 128
 894:	bc 01       	movw	r22, r24
 896:	cd 01       	movw	r24, r26
 898:	a2 01       	movw	r20, r4
 89a:	2a e0       	ldi	r18, 0x0A	; 10
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	0e 94 71 05 	call	0xae2	; 0xae2 <__ultoa_invert>
 8a2:	d8 2e       	mov	r13, r24
 8a4:	d4 18       	sub	r13, r4
 8a6:	3f c0       	rjmp	.+126    	; 0x926 <vfprintf+0x2d6>
 8a8:	85 37       	cpi	r24, 0x75	; 117
 8aa:	21 f4       	brne	.+8      	; 0x8b4 <vfprintf+0x264>
 8ac:	1f 7e       	andi	r17, 0xEF	; 239
 8ae:	2a e0       	ldi	r18, 0x0A	; 10
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	20 c0       	rjmp	.+64     	; 0x8f4 <vfprintf+0x2a4>
 8b4:	19 7f       	andi	r17, 0xF9	; 249
 8b6:	8f 36       	cpi	r24, 0x6F	; 111
 8b8:	a9 f0       	breq	.+42     	; 0x8e4 <vfprintf+0x294>
 8ba:	80 37       	cpi	r24, 0x70	; 112
 8bc:	20 f4       	brcc	.+8      	; 0x8c6 <vfprintf+0x276>
 8be:	88 35       	cpi	r24, 0x58	; 88
 8c0:	09 f0       	breq	.+2      	; 0x8c4 <vfprintf+0x274>
 8c2:	ae c0       	rjmp	.+348    	; 0xa20 <vfprintf+0x3d0>
 8c4:	0b c0       	rjmp	.+22     	; 0x8dc <vfprintf+0x28c>
 8c6:	80 37       	cpi	r24, 0x70	; 112
 8c8:	21 f0       	breq	.+8      	; 0x8d2 <vfprintf+0x282>
 8ca:	88 37       	cpi	r24, 0x78	; 120
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <vfprintf+0x280>
 8ce:	a8 c0       	rjmp	.+336    	; 0xa20 <vfprintf+0x3d0>
 8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <vfprintf+0x284>
 8d2:	10 61       	ori	r17, 0x10	; 16
 8d4:	14 ff       	sbrs	r17, 4
 8d6:	09 c0       	rjmp	.+18     	; 0x8ea <vfprintf+0x29a>
 8d8:	14 60       	ori	r17, 0x04	; 4
 8da:	07 c0       	rjmp	.+14     	; 0x8ea <vfprintf+0x29a>
 8dc:	14 ff       	sbrs	r17, 4
 8de:	08 c0       	rjmp	.+16     	; 0x8f0 <vfprintf+0x2a0>
 8e0:	16 60       	ori	r17, 0x06	; 6
 8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <vfprintf+0x2a0>
 8e4:	28 e0       	ldi	r18, 0x08	; 8
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <vfprintf+0x2a4>
 8ea:	20 e1       	ldi	r18, 0x10	; 16
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <vfprintf+0x2a4>
 8f0:	20 e1       	ldi	r18, 0x10	; 16
 8f2:	32 e0       	ldi	r19, 0x02	; 2
 8f4:	f5 01       	movw	r30, r10
 8f6:	17 ff       	sbrs	r17, 7
 8f8:	07 c0       	rjmp	.+14     	; 0x908 <vfprintf+0x2b8>
 8fa:	60 81       	ld	r22, Z
 8fc:	71 81       	ldd	r23, Z+1	; 0x01
 8fe:	82 81       	ldd	r24, Z+2	; 0x02
 900:	93 81       	ldd	r25, Z+3	; 0x03
 902:	44 e0       	ldi	r20, 0x04	; 4
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	06 c0       	rjmp	.+12     	; 0x914 <vfprintf+0x2c4>
 908:	60 81       	ld	r22, Z
 90a:	71 81       	ldd	r23, Z+1	; 0x01
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	42 e0       	ldi	r20, 0x02	; 2
 912:	50 e0       	ldi	r21, 0x00	; 0
 914:	a4 0e       	add	r10, r20
 916:	b5 1e       	adc	r11, r21
 918:	a2 01       	movw	r20, r4
 91a:	0e 94 71 05 	call	0xae2	; 0xae2 <__ultoa_invert>
 91e:	d8 2e       	mov	r13, r24
 920:	d4 18       	sub	r13, r4
 922:	01 2f       	mov	r16, r17
 924:	0f 77       	andi	r16, 0x7F	; 127
 926:	06 ff       	sbrs	r16, 6
 928:	09 c0       	rjmp	.+18     	; 0x93c <vfprintf+0x2ec>
 92a:	0e 7f       	andi	r16, 0xFE	; 254
 92c:	df 14       	cp	r13, r15
 92e:	30 f4       	brcc	.+12     	; 0x93c <vfprintf+0x2ec>
 930:	04 ff       	sbrs	r16, 4
 932:	06 c0       	rjmp	.+12     	; 0x940 <vfprintf+0x2f0>
 934:	02 fd       	sbrc	r16, 2
 936:	04 c0       	rjmp	.+8      	; 0x940 <vfprintf+0x2f0>
 938:	0f 7e       	andi	r16, 0xEF	; 239
 93a:	02 c0       	rjmp	.+4      	; 0x940 <vfprintf+0x2f0>
 93c:	1d 2d       	mov	r17, r13
 93e:	01 c0       	rjmp	.+2      	; 0x942 <vfprintf+0x2f2>
 940:	1f 2d       	mov	r17, r15
 942:	80 2f       	mov	r24, r16
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	04 ff       	sbrs	r16, 4
 948:	0c c0       	rjmp	.+24     	; 0x962 <vfprintf+0x312>
 94a:	fe 01       	movw	r30, r28
 94c:	ed 0d       	add	r30, r13
 94e:	f1 1d       	adc	r31, r1
 950:	20 81       	ld	r18, Z
 952:	20 33       	cpi	r18, 0x30	; 48
 954:	11 f4       	brne	.+4      	; 0x95a <vfprintf+0x30a>
 956:	09 7e       	andi	r16, 0xE9	; 233
 958:	09 c0       	rjmp	.+18     	; 0x96c <vfprintf+0x31c>
 95a:	02 ff       	sbrs	r16, 2
 95c:	06 c0       	rjmp	.+12     	; 0x96a <vfprintf+0x31a>
 95e:	1e 5f       	subi	r17, 0xFE	; 254
 960:	05 c0       	rjmp	.+10     	; 0x96c <vfprintf+0x31c>
 962:	86 78       	andi	r24, 0x86	; 134
 964:	90 70       	andi	r25, 0x00	; 0
 966:	00 97       	sbiw	r24, 0x00	; 0
 968:	09 f0       	breq	.+2      	; 0x96c <vfprintf+0x31c>
 96a:	1f 5f       	subi	r17, 0xFF	; 255
 96c:	80 2e       	mov	r8, r16
 96e:	99 24       	eor	r9, r9
 970:	03 fd       	sbrc	r16, 3
 972:	12 c0       	rjmp	.+36     	; 0x998 <vfprintf+0x348>
 974:	00 ff       	sbrs	r16, 0
 976:	0d c0       	rjmp	.+26     	; 0x992 <vfprintf+0x342>
 978:	fd 2c       	mov	r15, r13
 97a:	1e 15       	cp	r17, r14
 97c:	50 f4       	brcc	.+20     	; 0x992 <vfprintf+0x342>
 97e:	fe 0c       	add	r15, r14
 980:	f1 1a       	sub	r15, r17
 982:	1e 2d       	mov	r17, r14
 984:	06 c0       	rjmp	.+12     	; 0x992 <vfprintf+0x342>
 986:	80 e2       	ldi	r24, 0x20	; 32
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	b3 01       	movw	r22, r6
 98c:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 990:	1f 5f       	subi	r17, 0xFF	; 255
 992:	1e 15       	cp	r17, r14
 994:	c0 f3       	brcs	.-16     	; 0x986 <vfprintf+0x336>
 996:	04 c0       	rjmp	.+8      	; 0x9a0 <vfprintf+0x350>
 998:	1e 15       	cp	r17, r14
 99a:	10 f4       	brcc	.+4      	; 0x9a0 <vfprintf+0x350>
 99c:	e1 1a       	sub	r14, r17
 99e:	01 c0       	rjmp	.+2      	; 0x9a2 <vfprintf+0x352>
 9a0:	ee 24       	eor	r14, r14
 9a2:	84 fe       	sbrs	r8, 4
 9a4:	0f c0       	rjmp	.+30     	; 0x9c4 <vfprintf+0x374>
 9a6:	80 e3       	ldi	r24, 0x30	; 48
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	b3 01       	movw	r22, r6
 9ac:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 9b0:	82 fe       	sbrs	r8, 2
 9b2:	1f c0       	rjmp	.+62     	; 0x9f2 <vfprintf+0x3a2>
 9b4:	81 fe       	sbrs	r8, 1
 9b6:	03 c0       	rjmp	.+6      	; 0x9be <vfprintf+0x36e>
 9b8:	88 e5       	ldi	r24, 0x58	; 88
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	10 c0       	rjmp	.+32     	; 0x9de <vfprintf+0x38e>
 9be:	88 e7       	ldi	r24, 0x78	; 120
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0d c0       	rjmp	.+26     	; 0x9de <vfprintf+0x38e>
 9c4:	c4 01       	movw	r24, r8
 9c6:	86 78       	andi	r24, 0x86	; 134
 9c8:	90 70       	andi	r25, 0x00	; 0
 9ca:	00 97       	sbiw	r24, 0x00	; 0
 9cc:	91 f0       	breq	.+36     	; 0x9f2 <vfprintf+0x3a2>
 9ce:	81 fc       	sbrc	r8, 1
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <vfprintf+0x386>
 9d2:	80 e2       	ldi	r24, 0x20	; 32
 9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <vfprintf+0x388>
 9d6:	8b e2       	ldi	r24, 0x2B	; 43
 9d8:	07 fd       	sbrc	r16, 7
 9da:	8d e2       	ldi	r24, 0x2D	; 45
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	b3 01       	movw	r22, r6
 9e0:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <vfprintf+0x3a2>
 9e6:	80 e3       	ldi	r24, 0x30	; 48
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	b3 01       	movw	r22, r6
 9ec:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 9f0:	fa 94       	dec	r15
 9f2:	df 14       	cp	r13, r15
 9f4:	c0 f3       	brcs	.-16     	; 0x9e6 <vfprintf+0x396>
 9f6:	da 94       	dec	r13
 9f8:	f2 01       	movw	r30, r4
 9fa:	ed 0d       	add	r30, r13
 9fc:	f1 1d       	adc	r31, r1
 9fe:	80 81       	ld	r24, Z
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	b3 01       	movw	r22, r6
 a04:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 a08:	dd 20       	and	r13, r13
 a0a:	a9 f7       	brne	.-22     	; 0x9f6 <vfprintf+0x3a6>
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <vfprintf+0x3ca>
 a0e:	80 e2       	ldi	r24, 0x20	; 32
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	b3 01       	movw	r22, r6
 a14:	0e 94 45 05 	call	0xa8a	; 0xa8a <fputc>
 a18:	ea 94       	dec	r14
 a1a:	ee 20       	and	r14, r14
 a1c:	c1 f7       	brne	.-16     	; 0xa0e <vfprintf+0x3be>
 a1e:	40 ce       	rjmp	.-896    	; 0x6a0 <vfprintf+0x50>
 a20:	f3 01       	movw	r30, r6
 a22:	86 81       	ldd	r24, Z+6	; 0x06
 a24:	97 81       	ldd	r25, Z+7	; 0x07
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <vfprintf+0x3dc>
 a28:	8f ef       	ldi	r24, 0xFF	; 255
 a2a:	9f ef       	ldi	r25, 0xFF	; 255
 a2c:	2d 96       	adiw	r28, 0x0d	; 13
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	1f 91       	pop	r17
 a3e:	0f 91       	pop	r16
 a40:	ff 90       	pop	r15
 a42:	ef 90       	pop	r14
 a44:	df 90       	pop	r13
 a46:	cf 90       	pop	r12
 a48:	bf 90       	pop	r11
 a4a:	af 90       	pop	r10
 a4c:	9f 90       	pop	r9
 a4e:	8f 90       	pop	r8
 a50:	7f 90       	pop	r7
 a52:	6f 90       	pop	r6
 a54:	5f 90       	pop	r5
 a56:	4f 90       	pop	r4
 a58:	3f 90       	pop	r3
 a5a:	2f 90       	pop	r2
 a5c:	08 95       	ret

00000a5e <strnlen_P>:
 a5e:	fc 01       	movw	r30, r24
 a60:	05 90       	lpm	r0, Z+
 a62:	61 50       	subi	r22, 0x01	; 1
 a64:	70 40       	sbci	r23, 0x00	; 0
 a66:	01 10       	cpse	r0, r1
 a68:	d8 f7       	brcc	.-10     	; 0xa60 <strnlen_P+0x2>
 a6a:	80 95       	com	r24
 a6c:	90 95       	com	r25
 a6e:	8e 0f       	add	r24, r30
 a70:	9f 1f       	adc	r25, r31
 a72:	08 95       	ret

00000a74 <strnlen>:
 a74:	fc 01       	movw	r30, r24
 a76:	61 50       	subi	r22, 0x01	; 1
 a78:	70 40       	sbci	r23, 0x00	; 0
 a7a:	01 90       	ld	r0, Z+
 a7c:	01 10       	cpse	r0, r1
 a7e:	d8 f7       	brcc	.-10     	; 0xa76 <strnlen+0x2>
 a80:	80 95       	com	r24
 a82:	90 95       	com	r25
 a84:	8e 0f       	add	r24, r30
 a86:	9f 1f       	adc	r25, r31
 a88:	08 95       	ret

00000a8a <fputc>:
 a8a:	0f 93       	push	r16
 a8c:	1f 93       	push	r17
 a8e:	cf 93       	push	r28
 a90:	df 93       	push	r29
 a92:	8c 01       	movw	r16, r24
 a94:	eb 01       	movw	r28, r22
 a96:	8b 81       	ldd	r24, Y+3	; 0x03
 a98:	81 ff       	sbrs	r24, 1
 a9a:	1b c0       	rjmp	.+54     	; 0xad2 <fputc+0x48>
 a9c:	82 ff       	sbrs	r24, 2
 a9e:	0d c0       	rjmp	.+26     	; 0xaba <fputc+0x30>
 aa0:	2e 81       	ldd	r18, Y+6	; 0x06
 aa2:	3f 81       	ldd	r19, Y+7	; 0x07
 aa4:	8c 81       	ldd	r24, Y+4	; 0x04
 aa6:	9d 81       	ldd	r25, Y+5	; 0x05
 aa8:	28 17       	cp	r18, r24
 aaa:	39 07       	cpc	r19, r25
 aac:	64 f4       	brge	.+24     	; 0xac6 <fputc+0x3c>
 aae:	e8 81       	ld	r30, Y
 ab0:	f9 81       	ldd	r31, Y+1	; 0x01
 ab2:	01 93       	st	Z+, r16
 ab4:	f9 83       	std	Y+1, r31	; 0x01
 ab6:	e8 83       	st	Y, r30
 ab8:	06 c0       	rjmp	.+12     	; 0xac6 <fputc+0x3c>
 aba:	e8 85       	ldd	r30, Y+8	; 0x08
 abc:	f9 85       	ldd	r31, Y+9	; 0x09
 abe:	80 2f       	mov	r24, r16
 ac0:	19 95       	eicall
 ac2:	00 97       	sbiw	r24, 0x00	; 0
 ac4:	31 f4       	brne	.+12     	; 0xad2 <fputc+0x48>
 ac6:	8e 81       	ldd	r24, Y+6	; 0x06
 ac8:	9f 81       	ldd	r25, Y+7	; 0x07
 aca:	01 96       	adiw	r24, 0x01	; 1
 acc:	9f 83       	std	Y+7, r25	; 0x07
 ace:	8e 83       	std	Y+6, r24	; 0x06
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <fputc+0x4c>
 ad2:	0f ef       	ldi	r16, 0xFF	; 255
 ad4:	1f ef       	ldi	r17, 0xFF	; 255
 ad6:	c8 01       	movw	r24, r16
 ad8:	df 91       	pop	r29
 ada:	cf 91       	pop	r28
 adc:	1f 91       	pop	r17
 ade:	0f 91       	pop	r16
 ae0:	08 95       	ret

00000ae2 <__ultoa_invert>:
 ae2:	fa 01       	movw	r30, r20
 ae4:	aa 27       	eor	r26, r26
 ae6:	28 30       	cpi	r18, 0x08	; 8
 ae8:	51 f1       	breq	.+84     	; 0xb3e <__ultoa_invert+0x5c>
 aea:	20 31       	cpi	r18, 0x10	; 16
 aec:	81 f1       	breq	.+96     	; 0xb4e <__ultoa_invert+0x6c>
 aee:	e8 94       	clt
 af0:	6f 93       	push	r22
 af2:	6e 7f       	andi	r22, 0xFE	; 254
 af4:	6e 5f       	subi	r22, 0xFE	; 254
 af6:	7f 4f       	sbci	r23, 0xFF	; 255
 af8:	8f 4f       	sbci	r24, 0xFF	; 255
 afa:	9f 4f       	sbci	r25, 0xFF	; 255
 afc:	af 4f       	sbci	r26, 0xFF	; 255
 afe:	b1 e0       	ldi	r27, 0x01	; 1
 b00:	3e d0       	rcall	.+124    	; 0xb7e <__ultoa_invert+0x9c>
 b02:	b4 e0       	ldi	r27, 0x04	; 4
 b04:	3c d0       	rcall	.+120    	; 0xb7e <__ultoa_invert+0x9c>
 b06:	67 0f       	add	r22, r23
 b08:	78 1f       	adc	r23, r24
 b0a:	89 1f       	adc	r24, r25
 b0c:	9a 1f       	adc	r25, r26
 b0e:	a1 1d       	adc	r26, r1
 b10:	68 0f       	add	r22, r24
 b12:	79 1f       	adc	r23, r25
 b14:	8a 1f       	adc	r24, r26
 b16:	91 1d       	adc	r25, r1
 b18:	a1 1d       	adc	r26, r1
 b1a:	6a 0f       	add	r22, r26
 b1c:	71 1d       	adc	r23, r1
 b1e:	81 1d       	adc	r24, r1
 b20:	91 1d       	adc	r25, r1
 b22:	a1 1d       	adc	r26, r1
 b24:	20 d0       	rcall	.+64     	; 0xb66 <__ultoa_invert+0x84>
 b26:	09 f4       	brne	.+2      	; 0xb2a <__ultoa_invert+0x48>
 b28:	68 94       	set
 b2a:	3f 91       	pop	r19
 b2c:	2a e0       	ldi	r18, 0x0A	; 10
 b2e:	26 9f       	mul	r18, r22
 b30:	11 24       	eor	r1, r1
 b32:	30 19       	sub	r19, r0
 b34:	30 5d       	subi	r19, 0xD0	; 208
 b36:	31 93       	st	Z+, r19
 b38:	de f6       	brtc	.-74     	; 0xaf0 <__ultoa_invert+0xe>
 b3a:	cf 01       	movw	r24, r30
 b3c:	08 95       	ret
 b3e:	46 2f       	mov	r20, r22
 b40:	47 70       	andi	r20, 0x07	; 7
 b42:	40 5d       	subi	r20, 0xD0	; 208
 b44:	41 93       	st	Z+, r20
 b46:	b3 e0       	ldi	r27, 0x03	; 3
 b48:	0f d0       	rcall	.+30     	; 0xb68 <__ultoa_invert+0x86>
 b4a:	c9 f7       	brne	.-14     	; 0xb3e <__ultoa_invert+0x5c>
 b4c:	f6 cf       	rjmp	.-20     	; 0xb3a <__ultoa_invert+0x58>
 b4e:	46 2f       	mov	r20, r22
 b50:	4f 70       	andi	r20, 0x0F	; 15
 b52:	40 5d       	subi	r20, 0xD0	; 208
 b54:	4a 33       	cpi	r20, 0x3A	; 58
 b56:	18 f0       	brcs	.+6      	; 0xb5e <__ultoa_invert+0x7c>
 b58:	49 5d       	subi	r20, 0xD9	; 217
 b5a:	31 fd       	sbrc	r19, 1
 b5c:	40 52       	subi	r20, 0x20	; 32
 b5e:	41 93       	st	Z+, r20
 b60:	02 d0       	rcall	.+4      	; 0xb66 <__ultoa_invert+0x84>
 b62:	a9 f7       	brne	.-22     	; 0xb4e <__ultoa_invert+0x6c>
 b64:	ea cf       	rjmp	.-44     	; 0xb3a <__ultoa_invert+0x58>
 b66:	b4 e0       	ldi	r27, 0x04	; 4
 b68:	a6 95       	lsr	r26
 b6a:	97 95       	ror	r25
 b6c:	87 95       	ror	r24
 b6e:	77 95       	ror	r23
 b70:	67 95       	ror	r22
 b72:	ba 95       	dec	r27
 b74:	c9 f7       	brne	.-14     	; 0xb68 <__ultoa_invert+0x86>
 b76:	00 97       	sbiw	r24, 0x00	; 0
 b78:	61 05       	cpc	r22, r1
 b7a:	71 05       	cpc	r23, r1
 b7c:	08 95       	ret
 b7e:	9b 01       	movw	r18, r22
 b80:	ac 01       	movw	r20, r24
 b82:	0a 2e       	mov	r0, r26
 b84:	06 94       	lsr	r0
 b86:	57 95       	ror	r21
 b88:	47 95       	ror	r20
 b8a:	37 95       	ror	r19
 b8c:	27 95       	ror	r18
 b8e:	ba 95       	dec	r27
 b90:	c9 f7       	brne	.-14     	; 0xb84 <__ultoa_invert+0xa2>
 b92:	62 0f       	add	r22, r18
 b94:	73 1f       	adc	r23, r19
 b96:	84 1f       	adc	r24, r20
 b98:	95 1f       	adc	r25, r21
 b9a:	a0 1d       	adc	r26, r0
 b9c:	08 95       	ret

00000b9e <_exit>:
 b9e:	f8 94       	cli

00000ba0 <__stop_program>:
 ba0:	ff cf       	rjmp	.-2      	; 0xba0 <__stop_program>
