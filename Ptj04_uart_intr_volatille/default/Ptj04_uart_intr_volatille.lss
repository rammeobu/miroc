
Ptj04_uart_intr_volatille.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800200  000003ea  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  0080023e  0080023e  000004bc  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00000cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bc2  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000439  00000000  00000000  000019ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000661  00000000  00000000  00001df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002454  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000230  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e8  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00002aec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ee       	ldi	r30, 0xEA	; 234
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 33       	cpi	r26, 0x3E	; 62
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	ae e3       	ldi	r26, 0x3E	; 62
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a9 38       	cpi	r26, 0x89	; 137
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
 124:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <led_init>:
#include <avr/io.h>
#include "led.h"
static uint8_t Leds;
void led_init(void){
	DDRL=PORTL=0xff;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	80 93 0b 01 	sts	0x010B, r24
 132:	80 93 0a 01 	sts	0x010A, r24
}
 136:	08 95       	ret

00000138 <led_on_all>:
void led_on_all(void){
	Leds=PORTL=0x00;
 138:	10 92 0b 01 	sts	0x010B, r1
 13c:	10 92 3e 02 	sts	0x023E, r1
}
 140:	08 95       	ret

00000142 <led_off_all>:
void led_off_all(void){
	Leds=PORTL=0xff;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	80 93 0b 01 	sts	0x010B, r24
 148:	80 93 3e 02 	sts	0x023E, r24
}
 14c:	08 95       	ret

0000014e <led_on>:
void led_on(uint8_t led_no){
	Leds &=~(1<<led_no);
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <led_on+0xa>
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <led_on+0x6>
 15c:	20 95       	com	r18
 15e:	80 91 3e 02 	lds	r24, 0x023E
 162:	28 23       	and	r18, r24
 164:	20 93 3e 02 	sts	0x023E, r18
	PORTL=Leds;
 168:	20 93 0b 01 	sts	0x010B, r18
}
 16c:	08 95       	ret

0000016e <led_off>:
void led_off(uint8_t led_no){
	Leds |=(1<<led_no);
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <led_off+0xa>
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <led_off+0x6>
 17c:	80 91 3e 02 	lds	r24, 0x023E
 180:	82 2b       	or	r24, r18
 182:	80 93 3e 02 	sts	0x023E, r24
	PORTL=Leds;
 186:	80 93 0b 01 	sts	0x010B, r24
}
 18a:	08 95       	ret

0000018c <led_set>:
void led_set(uint8_t led_mask){
	Leds=~led_mask;
 18c:	80 95       	com	r24
 18e:	80 93 3e 02 	sts	0x023E, r24
	PORTL=Leds;
 192:	80 93 0b 01 	sts	0x010B, r24
}
 196:	08 95       	ret

00000198 <uart_putchar_2>:
	_delay_ms(100);
	UDR0 =ch;
	return (1);
}

int uart_putchar_2(char ch,FILE *stream){
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
	if(ch=='\n'){
 19c:	8a 30       	cpi	r24, 0x0A	; 10
 19e:	19 f4       	brne	.+6      	; 0x1a6 <uart_putchar_2+0xe>
		uart_putchar_2('\r',stream);
 1a0:	8d e0       	ldi	r24, 0x0D	; 13
 1a2:	0e 94 cc 00 	call	0x198	; 0x198 <uart_putchar_2>
	}
	while(!(UCSR0A & (1<<UDRE0)) )//상태 체크
 1a6:	80 91 c0 00 	lds	r24, 0x00C0
 1aa:	85 ff       	sbrs	r24, 5
 1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <uart_putchar_2+0xe>
	;
	UDR0 =ch;
 1ae:	c0 93 c6 00 	sts	0x00C6, r28
	return (1);
}
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <uart_init>:
#include <string.h>
int uart_putchar_1(char  ch, FILE *stream);
int uart_putchar_2(char  ch, FILE *stream);
FILE Mystdout=FDEV_SETUP_STREAM(uart_putchar_2,NULL,_FDEV_SETUP_WRITE);
void uart_init(void){
	stdout=&Mystdout;
 1ba:	80 e3       	ldi	r24, 0x30	; 48
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	90 93 86 02 	sts	0x0286, r25
 1c2:	80 93 85 02 	sts	0x0285, r24
	UBRR0H=0x00;
 1c6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=0x07;
 1ca:	87 e0       	ldi	r24, 0x07	; 7
 1cc:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A |=(1<<U2X0);
 1d0:	e0 ec       	ldi	r30, 0xC0	; 192
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	82 60       	ori	r24, 0x02	; 2
 1d8:	80 83       	st	Z, r24
	UCSR0B |=(1<<TXEN0);	
 1da:	e1 ec       	ldi	r30, 0xC1	; 193
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	88 60       	ori	r24, 0x08	; 8
 1e2:	80 83       	st	Z, r24
	UCSR0B |=(1<<TXCIE0);
 1e4:	80 81       	ld	r24, Z
 1e6:	80 64       	ori	r24, 0x40	; 64
 1e8:	80 83       	st	Z, r24
}
 1ea:	08 95       	ret

000001ec <uart_putstart>:
char buf[64];
 int bufi;
volatile int txend;
void uart_putstart(char str[]){
 1ec:	bc 01       	movw	r22, r24
	char ch;
	strcpy(buf,str);bufi=0;
 1ee:	83 e4       	ldi	r24, 0x43	; 67
 1f0:	92 e0       	ldi	r25, 0x02	; 2
 1f2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <strcpy>
	ch=buf[bufi++];
 1f6:	20 91 43 02 	lds	r18, 0x0243
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	90 93 40 02 	sts	0x0240, r25
 202:	80 93 3f 02 	sts	0x023F, r24
	UDR0=ch;
 206:	20 93 c6 00 	sts	0x00C6, r18
}
 20a:	08 95       	ret

0000020c <uart_putchar_1>:
int uart_putchar_1(char ch,FILE *stream){
 20c:	cf 93       	push	r28
 20e:	c8 2f       	mov	r28, r24
	if(ch=='\n'){
 210:	8a 30       	cpi	r24, 0x0A	; 10
 212:	19 f4       	brne	.+6      	; 0x21a <uart_putchar_1+0xe>
		uart_putchar_1('\r',stream);
 214:	8d e0       	ldi	r24, 0x0D	; 13
 216:	0e 94 06 01 	call	0x20c	; 0x20c <uart_putchar_1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	9f e3       	ldi	r25, 0x3F	; 63
 21e:	a2 e0       	ldi	r26, 0x02	; 2
 220:	81 50       	subi	r24, 0x01	; 1
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	a0 40       	sbci	r26, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <uart_putchar_1+0x14>
 228:	00 c0       	rjmp	.+0      	; 0x22a <uart_putchar_1+0x1e>
 22a:	00 00       	nop
	}
	_delay_ms(100);
	UDR0 =ch;
 22c:	c0 93 c6 00 	sts	0x00C6, r28
	return (1);
}
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <uart_putchar>:
	while(!(UCSR0A & (1<<UDRE0)) )//상태 체크
	;
	UDR0 =ch;
	return (1);
}
void uart_putchar(char ch){
 238:	cf 93       	push	r28
 23a:	c8 2f       	mov	r28, r24
	if(ch=='\n'){
 23c:	8a 30       	cpi	r24, 0x0A	; 10
 23e:	19 f4       	brne	.+6      	; 0x246 <uart_putchar+0xe>
		uart_putchar('\r');
 240:	8d e0       	ldi	r24, 0x0D	; 13
 242:	0e 94 1c 01 	call	0x238	; 0x238 <uart_putchar>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	9f e3       	ldi	r25, 0x3F	; 63
 24a:	a2 e0       	ldi	r26, 0x02	; 2
 24c:	81 50       	subi	r24, 0x01	; 1
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	a0 40       	sbci	r26, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <uart_putchar+0x14>
 254:	00 c0       	rjmp	.+0      	; 0x256 <uart_putchar+0x1e>
 256:	00 00       	nop
	}
	_delay_ms(100);
	UDR0 =ch;
 258:	c0 93 c6 00 	sts	0x00C6, r28
}
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <uart_putstr>:
void uart_putstr(char *sp){
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ec 01       	movw	r28, r24
	for (;*sp;sp++){
 266:	02 c0       	rjmp	.+4      	; 0x26c <uart_putstr+0xc>
		uart_putchar(*sp);
 268:	0e 94 1c 01 	call	0x238	; 0x238 <uart_putchar>
	}
	_delay_ms(100);
	UDR0 =ch;
}
void uart_putstr(char *sp){
	for (;*sp;sp++){
 26c:	89 91       	ld	r24, Y+
 26e:	88 23       	and	r24, r24
 270:	d9 f7       	brne	.-10     	; 0x268 <uart_putstr+0x8>
		uart_putchar(*sp);
	}
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <is_prime>:
int is_prime(int n){
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	fc 01       	movw	r30, r24
		int i;
		for (i=2;i<=n/2;i++){
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	0e 94 c5 01 	call	0x38a	; 0x38a <__divmodhi4>
 286:	eb 01       	movw	r28, r22
 288:	22 e0       	ldi	r18, 0x02	; 2
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	08 c0       	rjmp	.+16     	; 0x29e <is_prime+0x26>
			if((n%i)==0)return(0);	
 28e:	cf 01       	movw	r24, r30
 290:	b9 01       	movw	r22, r18
 292:	0e 94 c5 01 	call	0x38a	; 0x38a <__divmodhi4>
 296:	00 97       	sbiw	r24, 0x00	; 0
 298:	41 f0       	breq	.+16     	; 0x2aa <is_prime+0x32>
		uart_putchar(*sp);
	}
}
int is_prime(int n){
		int i;
		for (i=2;i<=n/2;i++){
 29a:	2f 5f       	subi	r18, 0xFF	; 255
 29c:	3f 4f       	sbci	r19, 0xFF	; 255
 29e:	c2 17       	cp	r28, r18
 2a0:	d3 07       	cpc	r29, r19
 2a2:	ac f7       	brge	.-22     	; 0x28e <is_prime+0x16>
			if((n%i)==0)return(0);	
		}
		return(1);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <is_prime+0x36>
	}
}
int is_prime(int n){
		int i;
		for (i=2;i<=n/2;i++){
			if((n%i)==0)return(0);	
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
		}
		return(1);
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <__vector_27>:
ISR(USART0_TX_vect){
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	0b b6       	in	r0, 0x3b	; 59
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	2f 93       	push	r18
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
	char ch = buf[bufi];
 2cc:	80 91 3f 02 	lds	r24, 0x023F
 2d0:	90 91 40 02 	lds	r25, 0x0240
 2d4:	fc 01       	movw	r30, r24
 2d6:	ed 5b       	subi	r30, 0xBD	; 189
 2d8:	fd 4f       	sbci	r31, 0xFD	; 253
 2da:	20 81       	ld	r18, Z
	if(!ch){
 2dc:	22 23       	and	r18, r18
 2de:	39 f4       	brne	.+14     	; 0x2ee <__vector_27+0x3a>
		txend=1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	90 93 42 02 	sts	0x0242, r25
 2e8:	80 93 41 02 	sts	0x0241, r24
		return;
 2ec:	0c c0       	rjmp	.+24     	; 0x306 <__vector_27+0x52>
	}
	if(ch=='\n') buf[bufi]='\r';
 2ee:	2a 30       	cpi	r18, 0x0A	; 10
 2f0:	19 f4       	brne	.+6      	; 0x2f8 <__vector_27+0x44>
 2f2:	8d e0       	ldi	r24, 0x0D	; 13
 2f4:	80 83       	st	Z, r24
 2f6:	05 c0       	rjmp	.+10     	; 0x302 <__vector_27+0x4e>
	else bufi++;
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	90 93 40 02 	sts	0x0240, r25
 2fe:	80 93 3f 02 	sts	0x023F, r24
	UDR0=ch;
 302:	20 93 c6 00 	sts	0x00C6, r18
}
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0b be       	out	0x3b, r0	; 59
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <main>:
#include <compat/deprecated.h>
#include "uart.h"
#include <avr/interrupt.h>
int main(){
	int i;
	uart_init();
 31e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <uart_init>
	sei();
 322:	78 94       	sei
	txend=0;
 324:	10 92 42 02 	sts	0x0242, r1
 328:	10 92 41 02 	sts	0x0241, r1
 32c:	ca e0       	ldi	r28, 0x0A	; 10
 32e:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0;i<10;i++){
		uart_putstart("I love you\n");
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	92 e0       	ldi	r25, 0x02	; 2
 334:	0e 94 f6 00 	call	0x1ec	; 0x1ec <uart_putstart>
			while(!txend); txend=0;
 338:	80 91 41 02 	lds	r24, 0x0241
 33c:	90 91 42 02 	lds	r25, 0x0242
 340:	00 97       	sbiw	r24, 0x00	; 0
 342:	d1 f3       	breq	.-12     	; 0x338 <main+0x1a>
 344:	10 92 42 02 	sts	0x0242, r1
 348:	10 92 41 02 	sts	0x0241, r1
		uart_putstart("You love me\n");
 34c:	8c e0       	ldi	r24, 0x0C	; 12
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	0e 94 f6 00 	call	0x1ec	; 0x1ec <uart_putstart>
			while(!txend); txend=0;
 354:	80 91 41 02 	lds	r24, 0x0241
 358:	90 91 42 02 	lds	r25, 0x0242
 35c:	00 97       	sbiw	r24, 0x00	; 0
 35e:	d1 f3       	breq	.-12     	; 0x354 <main+0x36>
 360:	10 92 42 02 	sts	0x0242, r1
 364:	10 92 41 02 	sts	0x0241, r1
		uart_putstart("He loves her.\n");
 368:	89 e1       	ldi	r24, 0x19	; 25
 36a:	92 e0       	ldi	r25, 0x02	; 2
 36c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <uart_putstart>
			while(!txend);
 370:	80 91 41 02 	lds	r24, 0x0241
 374:	90 91 42 02 	lds	r25, 0x0242
 378:	00 97       	sbiw	r24, 0x00	; 0
 37a:	d1 f3       	breq	.-12     	; 0x370 <main+0x52>
 37c:	21 97       	sbiw	r28, 0x01	; 1
int main(){
	int i;
	uart_init();
	sei();
	txend=0;
	for(i=0;i<10;i++){
 37e:	c1 f6       	brne	.-80     	; 0x330 <main+0x12>
		uart_putstart("You love me\n");
			while(!txend); txend=0;
		uart_putstart("He loves her.\n");
			while(!txend);
	}
	uart_putstart("End!!1\n");
 380:	88 e2       	ldi	r24, 0x28	; 40
 382:	92 e0       	ldi	r25, 0x02	; 2
 384:	0e 94 f6 00 	call	0x1ec	; 0x1ec <uart_putstart>
 388:	ff cf       	rjmp	.-2      	; 0x388 <main+0x6a>

0000038a <__divmodhi4>:
 38a:	97 fb       	bst	r25, 7
 38c:	09 2e       	mov	r0, r25
 38e:	07 26       	eor	r0, r23
 390:	0a d0       	rcall	.+20     	; 0x3a6 <__divmodhi4_neg1>
 392:	77 fd       	sbrc	r23, 7
 394:	04 d0       	rcall	.+8      	; 0x39e <__divmodhi4_neg2>
 396:	0c d0       	rcall	.+24     	; 0x3b0 <__udivmodhi4>
 398:	06 d0       	rcall	.+12     	; 0x3a6 <__divmodhi4_neg1>
 39a:	00 20       	and	r0, r0
 39c:	1a f4       	brpl	.+6      	; 0x3a4 <__divmodhi4_exit>

0000039e <__divmodhi4_neg2>:
 39e:	70 95       	com	r23
 3a0:	61 95       	neg	r22
 3a2:	7f 4f       	sbci	r23, 0xFF	; 255

000003a4 <__divmodhi4_exit>:
 3a4:	08 95       	ret

000003a6 <__divmodhi4_neg1>:
 3a6:	f6 f7       	brtc	.-4      	; 0x3a4 <__divmodhi4_exit>
 3a8:	90 95       	com	r25
 3aa:	81 95       	neg	r24
 3ac:	9f 4f       	sbci	r25, 0xFF	; 255
 3ae:	08 95       	ret

000003b0 <__udivmodhi4>:
 3b0:	aa 1b       	sub	r26, r26
 3b2:	bb 1b       	sub	r27, r27
 3b4:	51 e1       	ldi	r21, 0x11	; 17
 3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <__udivmodhi4_ep>

000003b8 <__udivmodhi4_loop>:
 3b8:	aa 1f       	adc	r26, r26
 3ba:	bb 1f       	adc	r27, r27
 3bc:	a6 17       	cp	r26, r22
 3be:	b7 07       	cpc	r27, r23
 3c0:	10 f0       	brcs	.+4      	; 0x3c6 <__udivmodhi4_ep>
 3c2:	a6 1b       	sub	r26, r22
 3c4:	b7 0b       	sbc	r27, r23

000003c6 <__udivmodhi4_ep>:
 3c6:	88 1f       	adc	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	5a 95       	dec	r21
 3cc:	a9 f7       	brne	.-22     	; 0x3b8 <__udivmodhi4_loop>
 3ce:	80 95       	com	r24
 3d0:	90 95       	com	r25
 3d2:	bc 01       	movw	r22, r24
 3d4:	cd 01       	movw	r24, r26
 3d6:	08 95       	ret

000003d8 <strcpy>:
 3d8:	fb 01       	movw	r30, r22
 3da:	dc 01       	movw	r26, r24
 3dc:	01 90       	ld	r0, Z+
 3de:	0d 92       	st	X+, r0
 3e0:	00 20       	and	r0, r0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <strcpy+0x4>
 3e4:	08 95       	ret

000003e6 <_exit>:
 3e6:	f8 94       	cli

000003e8 <__stop_program>:
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <__stop_program>
