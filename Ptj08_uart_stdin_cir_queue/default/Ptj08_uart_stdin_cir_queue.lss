
Ptj08_uart_stdin_cir_queue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  00000b8a  00000c1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800270  00800270  00000c8e  2**0
                  ALLOC
  3 .stab         00000d20  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145f  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091f  00000000  00000000  000031c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bec  00000000  00000000  00003ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000046d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f3  00000000  00000000  00004a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb6  00000000  00000000  00004e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00005ad5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__vector_25>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e8       	ldi	r30, 0x8A	; 138
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 37       	cpi	r26, 0x70	; 112
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a0 e7       	ldi	r26, 0x70	; 112
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	af 3f       	cpi	r26, 0xFF	; 255
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 4e 02 	call	0x49c	; 0x49c <main>
 124:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <uart_getchar>:
	return (1);
}
int uart_getchar(FILE * stream){
	char ch;
	do{
		cli();
 12c:	f8 94       	cli
		ch=qi_delete();
 12e:	0e 94 b2 01 	call	0x364	; 0x364 <qi_delete>
		sei();
 132:	78 94       	sei
	}while (ch==0);
 134:	88 23       	and	r24, r24
 136:	d1 f3       	breq	.-12     	; 0x12c <uart_getchar>
	if (ch==EOF)return (1);
	else return (ch);
}
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret

0000013c <uart_putchar>:
	sbi(UCSR0B,TXEN0);
	sbi(UCSR0B,TXCIE0);
	sbi(UCSR0B,RXEN0);
	sbi(UCSR0B,RXCIE0);
}
int uart_putchar(char ch, FILE * stream){
 13c:	cf 93       	push	r28
 13e:	c8 2f       	mov	r28, r24
	if (ch=='\n')uart_putchar('\r',stream);
 140:	8a 30       	cpi	r24, 0x0A	; 10
 142:	19 f4       	brne	.+6      	; 0x14a <uart_putchar+0xe>
 144:	8d e0       	ldi	r24, 0x0D	; 13
 146:	0e 94 9e 00 	call	0x13c	; 0x13c <uart_putchar>
	cli();
 14a:	f8 94       	cli
	if(!uart_busy){
 14c:	80 91 70 02 	lds	r24, 0x0270
 150:	88 23       	and	r24, r24
 152:	59 f4       	brne	.+22     	; 0x16a <uart_putchar+0x2e>
		UDR0=ch;
 154:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy=1;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 70 02 	sts	0x0270, r24
 15e:	0a c0       	rjmp	.+20     	; 0x174 <uart_putchar+0x38>
	}
	else{
		while(qo_insert(ch)==0){
			sei();
 160:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	86 ef       	ldi	r24, 0xF6	; 246
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <uart_putchar+0x28>
			_delay_us(100);
			cli();
 168:	f8 94       	cli
	if(!uart_busy){
		UDR0=ch;
		uart_busy=1;
	}
	else{
		while(qo_insert(ch)==0){
 16a:	8c 2f       	mov	r24, r28
 16c:	0e 94 90 01 	call	0x320	; 0x320 <qo_insert>
 170:	00 97       	sbiw	r24, 0x00	; 0
 172:	b1 f3       	breq	.-20     	; 0x160 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
 174:	78 94       	sei
	return (1);
}
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <uart_init>:
#define EOT 0x04
FILE Mystdout = FDEV_SETUP_STREAM(uart_putchar,NULL,_FDEV_SETUP_WRITE);
FILE Mystdin = FDEV_SETUP_STREAM(NULL,uart_getchar,_FDEV_SETUP_READ);
char uart_busy;
void uart_init(void){
	stdout=&Mystdout;
 17e:	82 e4       	ldi	r24, 0x42	; 66
 180:	92 e0       	ldi	r25, 0x02	; 2
 182:	90 93 fc 02 	sts	0x02FC, r25
 186:	80 93 fb 02 	sts	0x02FB, r24
	stdin=&Mystdin;
 18a:	84 e3       	ldi	r24, 0x34	; 52
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	90 93 fa 02 	sts	0x02FA, r25
 192:	80 93 f9 02 	sts	0x02F9, r24
	qi_init();
 196:	0e 94 5d 01 	call	0x2ba	; 0x2ba <qi_init>
	uart_busy=0;
 19a:	10 92 70 02 	sts	0x0270, r1
	UBRR0H=0x00;UBRR0L=0x07;
 19e:	10 92 c5 00 	sts	0x00C5, r1
 1a2:	87 e0       	ldi	r24, 0x07	; 7
 1a4:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A,U2X0);
 1a8:	e0 ec       	ldi	r30, 0xC0	; 192
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	82 60       	ori	r24, 0x02	; 2
 1b0:	80 83       	st	Z, r24
	sbi(UCSR0B,TXEN0);
 1b2:	e1 ec       	ldi	r30, 0xC1	; 193
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	88 60       	ori	r24, 0x08	; 8
 1ba:	80 83       	st	Z, r24
	sbi(UCSR0B,TXCIE0);
 1bc:	80 81       	ld	r24, Z
 1be:	80 64       	ori	r24, 0x40	; 64
 1c0:	80 83       	st	Z, r24
	sbi(UCSR0B,RXEN0);
 1c2:	80 81       	ld	r24, Z
 1c4:	80 61       	ori	r24, 0x10	; 16
 1c6:	80 83       	st	Z, r24
	sbi(UCSR0B,RXCIE0);
 1c8:	80 81       	ld	r24, Z
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	80 83       	st	Z, r24
}
 1ce:	08 95       	ret

000001d0 <uart_echo>:
	}while (ch==0);
	if (ch==EOF)return (1);
	else return (ch);
}

void uart_echo(char ch){
 1d0:	cf 93       	push	r28
 1d2:	c8 2f       	mov	r28, r24
	if(ch=='\n')uart_echo('\n');
 1d4:	8a 30       	cpi	r24, 0x0A	; 10
 1d6:	19 f4       	brne	.+6      	; 0x1de <uart_echo+0xe>
 1d8:	8a e0       	ldi	r24, 0x0A	; 10
 1da:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <uart_echo>
	if(!uart_busy){
 1de:	80 91 70 02 	lds	r24, 0x0270
 1e2:	88 23       	and	r24, r24
 1e4:	31 f4       	brne	.+12     	; 0x1f2 <uart_echo+0x22>
		UDR0=ch;
 1e6:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy=1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 70 02 	sts	0x0270, r24
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <uart_echo+0x28>
	}else{
		qo_insert(ch);
 1f2:	8c 2f       	mov	r24, r28
 1f4:	0e 94 90 01 	call	0x320	; 0x320 <qo_insert>
	}
}
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <__vector_27>:
ISR(USART0_TX_vect){
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	0b b6       	in	r0, 0x3b	; 59
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	char ch ;
	if((ch=qo_delete())==0)
 222:	0e 94 cf 01 	call	0x39e	; 0x39e <qo_delete>
 226:	88 23       	and	r24, r24
 228:	19 f4       	brne	.+6      	; 0x230 <__vector_27+0x34>
		uart_busy=0;
 22a:	10 92 70 02 	sts	0x0270, r1
 22e:	02 c0       	rjmp	.+4      	; 0x234 <__vector_27+0x38>
	else
		UDR0=ch;	
 230:	80 93 c6 00 	sts	0x00C6, r24
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0b be       	out	0x3b, r0	; 59
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_25>:

ISR(USART0_RX_vect){
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	0b b6       	in	r0, 0x3b	; 59
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	3f 93       	push	r19
 26c:	4f 93       	push	r20
 26e:	5f 93       	push	r21
 270:	6f 93       	push	r22
 272:	7f 93       	push	r23
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
 278:	af 93       	push	r26
 27a:	bf 93       	push	r27
 27c:	cf 93       	push	r28
 27e:	ef 93       	push	r30
 280:	ff 93       	push	r31
	char ch;
	ch=UDR0;
 282:	c0 91 c6 00 	lds	r28, 0x00C6
	if(ch!=EOF){
		if(ch=='\n')ch='\n';
		uart_echo(ch);
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <uart_echo>
	}	
	qi_insert(ch);
 28c:	8c 2f       	mov	r24, r28
 28e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <qi_insert>
}
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	cf 91       	pop	r28
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0b be       	out	0x3b, r0	; 59
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <qi_init>:
#define QO_SIZE 64
#define QI_SIZE 64
char qi[QI_SIZE],qo[QO_SIZE];
int fi,ri,fo,ro;
void qi_init(){
	fi=ri=fo=ro=0;
 2ba:	10 92 b6 02 	sts	0x02B6, r1
 2be:	10 92 b5 02 	sts	0x02B5, r1
 2c2:	10 92 b4 02 	sts	0x02B4, r1
 2c6:	10 92 b3 02 	sts	0x02B3, r1
 2ca:	10 92 b8 02 	sts	0x02B8, r1
 2ce:	10 92 b7 02 	sts	0x02B7, r1
 2d2:	10 92 72 02 	sts	0x0272, r1
 2d6:	10 92 71 02 	sts	0x0271, r1
}
 2da:	08 95       	ret

000002dc <qi_insert>:
int qi_insert(char ch){
 2dc:	48 2f       	mov	r20, r24
	if((ri+1)%QI_SIZE==fi){
 2de:	20 91 b7 02 	lds	r18, 0x02B7
 2e2:	30 91 b8 02 	lds	r19, 0x02B8
 2e6:	2f 5f       	subi	r18, 0xFF	; 255
 2e8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ea:	c9 01       	movw	r24, r18
 2ec:	60 e4       	ldi	r22, 0x40	; 64
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	0e 94 ac 02 	call	0x558	; 0x558 <__divmodhi4>
 2f4:	9c 01       	movw	r18, r24
 2f6:	80 91 71 02 	lds	r24, 0x0271
 2fa:	90 91 72 02 	lds	r25, 0x0272
 2fe:	28 17       	cp	r18, r24
 300:	39 07       	cpc	r19, r25
 302:	59 f0       	breq	.+22     	; 0x31a <qi_insert+0x3e>
		return(0);
	}
	ri=(ri+1)%QI_SIZE;
 304:	30 93 b8 02 	sts	0x02B8, r19
 308:	20 93 b7 02 	sts	0x02B7, r18
	qi[ri]=ch;
 30c:	27 54       	subi	r18, 0x47	; 71
 30e:	3d 4f       	sbci	r19, 0xFD	; 253
 310:	f9 01       	movw	r30, r18
 312:	40 83       	st	Z, r20
	return(1);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	08 95       	ret
void qi_init(){
	fi=ri=fo=ro=0;
}
int qi_insert(char ch){
	if((ri+1)%QI_SIZE==fi){
		return(0);
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
	}
	ri=(ri+1)%QI_SIZE;
	qi[ri]=ch;
	return(1);
	
}
 31e:	08 95       	ret

00000320 <qo_insert>:
int qo_insert(char ch){
 320:	48 2f       	mov	r20, r24
	if((ro+1)%QO_SIZE==fo){
 322:	20 91 b5 02 	lds	r18, 0x02B5
 326:	30 91 b6 02 	lds	r19, 0x02B6
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	c9 01       	movw	r24, r18
 330:	60 e4       	ldi	r22, 0x40	; 64
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	0e 94 ac 02 	call	0x558	; 0x558 <__divmodhi4>
 338:	9c 01       	movw	r18, r24
 33a:	80 91 b3 02 	lds	r24, 0x02B3
 33e:	90 91 b4 02 	lds	r25, 0x02B4
 342:	28 17       	cp	r18, r24
 344:	39 07       	cpc	r19, r25
 346:	59 f0       	breq	.+22     	; 0x35e <qo_insert+0x3e>
		return(0);
	}
	ro=(ro+1)%QO_SIZE;
 348:	30 93 b6 02 	sts	0x02B6, r19
 34c:	20 93 b5 02 	sts	0x02B5, r18
	qo[ro]=ch;
 350:	2d 58       	subi	r18, 0x8D	; 141
 352:	3d 4f       	sbci	r19, 0xFD	; 253
 354:	f9 01       	movw	r30, r18
 356:	40 83       	st	Z, r20
	return(1);
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	08 95       	ret
	return(1);
	
}
int qo_insert(char ch){
	if((ro+1)%QO_SIZE==fo){
		return(0);
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
	}
	ro=(ro+1)%QO_SIZE;
	qo[ro]=ch;
	return(1);
	
}
 362:	08 95       	ret

00000364 <qi_delete>:
int qi_delete(){
	if(ri==fi)
 364:	80 91 71 02 	lds	r24, 0x0271
 368:	90 91 72 02 	lds	r25, 0x0272
 36c:	20 91 b7 02 	lds	r18, 0x02B7
 370:	30 91 b8 02 	lds	r19, 0x02B8
 374:	28 17       	cp	r18, r24
 376:	39 07       	cpc	r19, r25
 378:	79 f0       	breq	.+30     	; 0x398 <qi_delete+0x34>
		return 0;
	fi=(fi+1)%QI_SIZE;
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	60 e4       	ldi	r22, 0x40	; 64
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	0e 94 ac 02 	call	0x558	; 0x558 <__divmodhi4>
 384:	90 93 72 02 	sts	0x0272, r25
 388:	80 93 71 02 	sts	0x0271, r24
	return(qi[fi]);
 38c:	87 54       	subi	r24, 0x47	; 71
 38e:	9d 4f       	sbci	r25, 0xFD	; 253
 390:	fc 01       	movw	r30, r24
 392:	80 81       	ld	r24, Z
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	08 95       	ret
	return(1);
	
}
int qi_delete(){
	if(ri==fi)
		return 0;
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
	fi=(fi+1)%QI_SIZE;
	return(qi[fi]);
}
 39c:	08 95       	ret

0000039e <qo_delete>:
int qo_delete(){
	if(ro==fo)
 39e:	80 91 b3 02 	lds	r24, 0x02B3
 3a2:	90 91 b4 02 	lds	r25, 0x02B4
 3a6:	20 91 b5 02 	lds	r18, 0x02B5
 3aa:	30 91 b6 02 	lds	r19, 0x02B6
 3ae:	28 17       	cp	r18, r24
 3b0:	39 07       	cpc	r19, r25
 3b2:	79 f0       	breq	.+30     	; 0x3d2 <qo_delete+0x34>
		return 0;
	fo=(fo+1)%QO_SIZE;
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	60 e4       	ldi	r22, 0x40	; 64
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	0e 94 ac 02 	call	0x558	; 0x558 <__divmodhi4>
 3be:	90 93 b4 02 	sts	0x02B4, r25
 3c2:	80 93 b3 02 	sts	0x02B3, r24
	return(qo[fo]);
 3c6:	8d 58       	subi	r24, 0x8D	; 141
 3c8:	9d 4f       	sbci	r25, 0xFD	; 253
 3ca:	fc 01       	movw	r30, r24
 3cc:	80 81       	ld	r24, Z
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	08 95       	ret
	fi=(fi+1)%QI_SIZE;
	return(qi[fi]);
}
int qo_delete(){
	if(ro==fo)
		return 0;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
	fo=(fo+1)%QO_SIZE;
	return(qo[fo]);
}
 3d6:	08 95       	ret

000003d8 <is_prime>:
#include <stdio.h>
int is_prime(int n){
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	fc 01       	movw	r30, r24
		int i;
		for (i=2;i<=n/2;i++){
 3de:	62 e0       	ldi	r22, 0x02	; 2
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	0e 94 ac 02 	call	0x558	; 0x558 <__divmodhi4>
 3e6:	eb 01       	movw	r28, r22
 3e8:	22 e0       	ldi	r18, 0x02	; 2
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	08 c0       	rjmp	.+16     	; 0x3fe <is_prime+0x26>
			if((n%i)==0)return(0);	
 3ee:	cf 01       	movw	r24, r30
 3f0:	b9 01       	movw	r22, r18
 3f2:	0e 94 ac 02 	call	0x558	; 0x558 <__divmodhi4>
 3f6:	00 97       	sbiw	r24, 0x00	; 0
 3f8:	41 f0       	breq	.+16     	; 0x40a <is_prime+0x32>
#include <stdio.h>
int is_prime(int n){
		int i;
		for (i=2;i<=n/2;i++){
 3fa:	2f 5f       	subi	r18, 0xFF	; 255
 3fc:	3f 4f       	sbci	r19, 0xFF	; 255
 3fe:	c2 17       	cp	r28, r18
 400:	d3 07       	cpc	r29, r19
 402:	ac f7       	brge	.-22     	; 0x3ee <is_prime+0x16>
			if((n%i)==0)return(0);	
		}
		return(1);
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <is_prime+0x36>
#include <stdio.h>
int is_prime(int n){
		int i;
		for (i=2;i<=n/2;i++){
			if((n%i)==0)return(0);	
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	90 e0       	ldi	r25, 0x00	; 0
		}
		return(1);
}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <app_prime>:
void app_prime(int t){
 414:	cf 92       	push	r12
 416:	df 92       	push	r13
 418:	ef 92       	push	r14
 41a:	ff 92       	push	r15
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	7c 01       	movw	r14, r24
	int n, count=0;
 426:	00 e0       	ldi	r16, 0x00	; 0
 428:	10 e0       	ldi	r17, 0x00	; 0
	for(n=2;n<=t;n++){
 42a:	c2 e0       	ldi	r28, 0x02	; 2
 42c:	d0 e0       	ldi	r29, 0x00	; 0
	if(is_prime(n)){
			count++;
			printf("%d is a prime number\n",n);
 42e:	20 e5       	ldi	r18, 0x50	; 80
 430:	c2 2e       	mov	r12, r18
 432:	22 e0       	ldi	r18, 0x02	; 2
 434:	d2 2e       	mov	r13, r18
		}
		return(1);
}
void app_prime(int t){
	int n, count=0;
	for(n=2;n<=t;n++){
 436:	16 c0       	rjmp	.+44     	; 0x464 <app_prime+0x50>
	if(is_prime(n)){
 438:	ce 01       	movw	r24, r28
 43a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <is_prime>
 43e:	00 97       	sbiw	r24, 0x00	; 0
 440:	81 f0       	breq	.+32     	; 0x462 <app_prime+0x4e>
			count++;
 442:	0f 5f       	subi	r16, 0xFF	; 255
 444:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number\n",n);
 446:	00 d0       	rcall	.+0      	; 0x448 <app_prime+0x34>
 448:	0f 92       	push	r0
 44a:	ed b7       	in	r30, 0x3d	; 61
 44c:	fe b7       	in	r31, 0x3e	; 62
 44e:	d2 82       	std	Z+2, r13	; 0x02
 450:	c1 82       	std	Z+1, r12	; 0x01
 452:	d4 83       	std	Z+4, r29	; 0x04
 454:	c3 83       	std	Z+3, r28	; 0x03
 456:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <printf>
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
		}
		return(1);
}
void app_prime(int t){
	int n, count=0;
	for(n=2;n<=t;n++){
 462:	21 96       	adiw	r28, 0x01	; 1
 464:	ec 16       	cp	r14, r28
 466:	fd 06       	cpc	r15, r29
 468:	3c f7       	brge	.-50     	; 0x438 <app_prime+0x24>
	if(is_prime(n)){
			count++;
			printf("%d is a prime number\n",n);
		}
	}
	printf("count=%d\n",count);
 46a:	00 d0       	rcall	.+0      	; 0x46c <app_prime+0x58>
 46c:	0f 92       	push	r0
 46e:	86 e6       	ldi	r24, 0x66	; 102
 470:	92 e0       	ldi	r25, 0x02	; 2
 472:	ed b7       	in	r30, 0x3d	; 61
 474:	fe b7       	in	r31, 0x3e	; 62
 476:	92 83       	std	Z+2, r25	; 0x02
 478:	81 83       	std	Z+1, r24	; 0x01
 47a:	14 83       	std	Z+4, r17	; 0x04
 47c:	03 83       	std	Z+3, r16	; 0x03
 47e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <printf>
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
}
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	df 90       	pop	r13
 498:	cf 90       	pop	r12
 49a:	08 95       	ret

0000049c <main>:
#include <stdlib.h>
#include <string.h>
#include "uart.h"
#include "Circular_Queue.h"
#include "prime.h"
int main(){
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	c0 58       	subi	r28, 0x80	; 128
 4a6:	d0 40       	sbci	r29, 0x00	; 0
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	f8 94       	cli
 4ac:	de bf       	out	0x3e, r29	; 62
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	cd bf       	out	0x3d, r28	; 61
	char cmd[128],ch;
	int n=0;
	uart_init();
 4b2:	0e 94 bf 00 	call	0x17e	; 0x17e <uart_init>
	sei();
 4b6:	78 94       	sei
	printf("$ ");
 4b8:	0f 92       	push	r0
 4ba:	0f 92       	push	r0
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	e8 2e       	mov	r14, r24
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	f8 2e       	mov	r15, r24
 4c4:	ed b7       	in	r30, 0x3d	; 61
 4c6:	fe b7       	in	r31, 0x3e	; 62
 4c8:	f2 82       	std	Z+2, r15	; 0x02
 4ca:	e1 82       	std	Z+1, r14	; 0x01
 4cc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <printf>
 4d0:	0f 90       	pop	r0
 4d2:	0f 90       	pop	r0
#include "uart.h"
#include "Circular_Queue.h"
#include "prime.h"
int main(){
	char cmd[128],ch;
	int n=0;
 4d4:	00 e0       	ldi	r16, 0x00	; 0
 4d6:	10 e0       	ldi	r17, 0x00	; 0
				if(!strcmp(cmd,"app")) {app_prime(2000);
				}else if(!strcmp(cmd,"hi")) {printf("hi my name is kimunseong\n");
				}
				else 	printf("Unknon command..\n");
				n=0;
				printf("$ ");
 4d8:	de 2c       	mov	r13, r14
 4da:	ef 2c       	mov	r14, r15
	int n=0;
	uart_init();
	sei();
	printf("$ ");
	while(1){
		cli();
 4dc:	f8 94       	cli
		ch=qi_delete();
 4de:	0e 94 b2 01 	call	0x364	; 0x364 <qi_delete>
		sei();
 4e2:	78 94       	sei
		if(ch){
 4e4:	88 23       	and	r24, r24
 4e6:	d1 f3       	breq	.-12     	; 0x4dc <main+0x40>
			if(ch=='\r')continue;
 4e8:	8d 30       	cpi	r24, 0x0D	; 13
 4ea:	c1 f3       	breq	.-16     	; 0x4dc <main+0x40>
			if(ch=='\n'){
				cmd[n]=0;
 4ec:	e1 e0       	ldi	r30, 0x01	; 1
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	ec 0f       	add	r30, r28
 4f2:	fd 1f       	adc	r31, r29
 4f4:	e0 0f       	add	r30, r16
 4f6:	f1 1f       	adc	r31, r17
		cli();
		ch=qi_delete();
		sei();
		if(ch){
			if(ch=='\r')continue;
			if(ch=='\n'){
 4f8:	8a 30       	cpi	r24, 0x0A	; 10
 4fa:	51 f5       	brne	.+84     	; 0x550 <main+0xb4>
				cmd[n]=0;
 4fc:	10 82       	st	Z, r1
				if(!strcmp(cmd,"app")) {app_prime(2000);
 4fe:	ce 01       	movw	r24, r28
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	63 e0       	ldi	r22, 0x03	; 3
 504:	72 e0       	ldi	r23, 0x02	; 2
 506:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <strcmp>
 50a:	00 97       	sbiw	r24, 0x00	; 0
 50c:	29 f4       	brne	.+10     	; 0x518 <main+0x7c>
 50e:	80 ed       	ldi	r24, 0xD0	; 208
 510:	97 e0       	ldi	r25, 0x07	; 7
 512:	0e 94 0a 02 	call	0x414	; 0x414 <app_prime>
 516:	0f c0       	rjmp	.+30     	; 0x536 <main+0x9a>
				}else if(!strcmp(cmd,"hi")) {printf("hi my name is kimunseong\n");
 518:	ce 01       	movw	r24, r28
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	67 e0       	ldi	r22, 0x07	; 7
 51e:	72 e0       	ldi	r23, 0x02	; 2
 520:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <strcmp>
 524:	00 97       	sbiw	r24, 0x00	; 0
 526:	19 f4       	brne	.+6      	; 0x52e <main+0x92>
 528:	8a e0       	ldi	r24, 0x0A	; 10
 52a:	92 e0       	ldi	r25, 0x02	; 2
 52c:	02 c0       	rjmp	.+4      	; 0x532 <main+0x96>
				}
				else 	printf("Unknon command..\n");
 52e:	83 e2       	ldi	r24, 0x23	; 35
 530:	92 e0       	ldi	r25, 0x02	; 2
 532:	0e 94 ee 02 	call	0x5dc	; 0x5dc <puts>
				n=0;
				printf("$ ");
 536:	0f 92       	push	r0
 538:	0f 92       	push	r0
 53a:	ed b7       	in	r30, 0x3d	; 61
 53c:	fe b7       	in	r31, 0x3e	; 62
 53e:	d1 82       	std	Z+1, r13	; 0x01
 540:	e2 82       	std	Z+2, r14	; 0x02
 542:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <printf>
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
				cmd[n]=0;
				if(!strcmp(cmd,"app")) {app_prime(2000);
				}else if(!strcmp(cmd,"hi")) {printf("hi my name is kimunseong\n");
				}
				else 	printf("Unknon command..\n");
				n=0;
 54a:	00 e0       	ldi	r16, 0x00	; 0
 54c:	10 e0       	ldi	r17, 0x00	; 0
 54e:	c6 cf       	rjmp	.-116    	; 0x4dc <main+0x40>
				printf("$ ");
			}else{
				cmd[n++]=ch;
 550:	80 83       	st	Z, r24
 552:	0f 5f       	subi	r16, 0xFF	; 255
 554:	1f 4f       	sbci	r17, 0xFF	; 255
 556:	c2 cf       	rjmp	.-124    	; 0x4dc <main+0x40>

00000558 <__divmodhi4>:
 558:	97 fb       	bst	r25, 7
 55a:	09 2e       	mov	r0, r25
 55c:	07 26       	eor	r0, r23
 55e:	0a d0       	rcall	.+20     	; 0x574 <__divmodhi4_neg1>
 560:	77 fd       	sbrc	r23, 7
 562:	04 d0       	rcall	.+8      	; 0x56c <__divmodhi4_neg2>
 564:	0c d0       	rcall	.+24     	; 0x57e <__udivmodhi4>
 566:	06 d0       	rcall	.+12     	; 0x574 <__divmodhi4_neg1>
 568:	00 20       	and	r0, r0
 56a:	1a f4       	brpl	.+6      	; 0x572 <__divmodhi4_exit>

0000056c <__divmodhi4_neg2>:
 56c:	70 95       	com	r23
 56e:	61 95       	neg	r22
 570:	7f 4f       	sbci	r23, 0xFF	; 255

00000572 <__divmodhi4_exit>:
 572:	08 95       	ret

00000574 <__divmodhi4_neg1>:
 574:	f6 f7       	brtc	.-4      	; 0x572 <__divmodhi4_exit>
 576:	90 95       	com	r25
 578:	81 95       	neg	r24
 57a:	9f 4f       	sbci	r25, 0xFF	; 255
 57c:	08 95       	ret

0000057e <__udivmodhi4>:
 57e:	aa 1b       	sub	r26, r26
 580:	bb 1b       	sub	r27, r27
 582:	51 e1       	ldi	r21, 0x11	; 17
 584:	07 c0       	rjmp	.+14     	; 0x594 <__udivmodhi4_ep>

00000586 <__udivmodhi4_loop>:
 586:	aa 1f       	adc	r26, r26
 588:	bb 1f       	adc	r27, r27
 58a:	a6 17       	cp	r26, r22
 58c:	b7 07       	cpc	r27, r23
 58e:	10 f0       	brcs	.+4      	; 0x594 <__udivmodhi4_ep>
 590:	a6 1b       	sub	r26, r22
 592:	b7 0b       	sbc	r27, r23

00000594 <__udivmodhi4_ep>:
 594:	88 1f       	adc	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	5a 95       	dec	r21
 59a:	a9 f7       	brne	.-22     	; 0x586 <__udivmodhi4_loop>
 59c:	80 95       	com	r24
 59e:	90 95       	com	r25
 5a0:	bc 01       	movw	r22, r24
 5a2:	cd 01       	movw	r24, r26
 5a4:	08 95       	ret

000005a6 <strcmp>:
 5a6:	fb 01       	movw	r30, r22
 5a8:	dc 01       	movw	r26, r24
 5aa:	8d 91       	ld	r24, X+
 5ac:	01 90       	ld	r0, Z+
 5ae:	80 19       	sub	r24, r0
 5b0:	01 10       	cpse	r0, r1
 5b2:	d9 f3       	breq	.-10     	; 0x5aa <strcmp+0x4>
 5b4:	99 0b       	sbc	r25, r25
 5b6:	08 95       	ret

000005b8 <printf>:
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	fe 01       	movw	r30, r28
 5c2:	36 96       	adiw	r30, 0x06	; 6
 5c4:	61 91       	ld	r22, Z+
 5c6:	71 91       	ld	r23, Z+
 5c8:	80 91 fb 02 	lds	r24, 0x02FB
 5cc:	90 91 fc 02 	lds	r25, 0x02FC
 5d0:	af 01       	movw	r20, r30
 5d2:	0e 94 1c 03 	call	0x638	; 0x638 <vfprintf>
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

000005dc <puts>:
 5dc:	0f 93       	push	r16
 5de:	1f 93       	push	r17
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	8c 01       	movw	r16, r24
 5e6:	e0 91 fb 02 	lds	r30, 0x02FB
 5ea:	f0 91 fc 02 	lds	r31, 0x02FC
 5ee:	83 81       	ldd	r24, Z+3	; 0x03
 5f0:	81 ff       	sbrs	r24, 1
 5f2:	1a c0       	rjmp	.+52     	; 0x628 <puts+0x4c>
 5f4:	c0 e0       	ldi	r28, 0x00	; 0
 5f6:	d0 e0       	ldi	r29, 0x00	; 0
 5f8:	05 c0       	rjmp	.+10     	; 0x604 <puts+0x28>
 5fa:	19 95       	eicall
 5fc:	00 97       	sbiw	r24, 0x00	; 0
 5fe:	11 f0       	breq	.+4      	; 0x604 <puts+0x28>
 600:	cf ef       	ldi	r28, 0xFF	; 255
 602:	df ef       	ldi	r29, 0xFF	; 255
 604:	f8 01       	movw	r30, r16
 606:	81 91       	ld	r24, Z+
 608:	8f 01       	movw	r16, r30
 60a:	60 91 fb 02 	lds	r22, 0x02FB
 60e:	70 91 fc 02 	lds	r23, 0x02FC
 612:	db 01       	movw	r26, r22
 614:	18 96       	adiw	r26, 0x08	; 8
 616:	ed 91       	ld	r30, X+
 618:	fc 91       	ld	r31, X
 61a:	19 97       	sbiw	r26, 0x09	; 9
 61c:	88 23       	and	r24, r24
 61e:	69 f7       	brne	.-38     	; 0x5fa <puts+0x1e>
 620:	8a e0       	ldi	r24, 0x0A	; 10
 622:	19 95       	eicall
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	11 f0       	breq	.+4      	; 0x62c <puts+0x50>
 628:	cf ef       	ldi	r28, 0xFF	; 255
 62a:	df ef       	ldi	r29, 0xFF	; 255
 62c:	ce 01       	movw	r24, r28
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	0f 91       	pop	r16
 636:	08 95       	ret

00000638 <vfprintf>:
 638:	2f 92       	push	r2
 63a:	3f 92       	push	r3
 63c:	4f 92       	push	r4
 63e:	5f 92       	push	r5
 640:	6f 92       	push	r6
 642:	7f 92       	push	r7
 644:	8f 92       	push	r8
 646:	9f 92       	push	r9
 648:	af 92       	push	r10
 64a:	bf 92       	push	r11
 64c:	cf 92       	push	r12
 64e:	df 92       	push	r13
 650:	ef 92       	push	r14
 652:	ff 92       	push	r15
 654:	0f 93       	push	r16
 656:	1f 93       	push	r17
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
 65c:	cd b7       	in	r28, 0x3d	; 61
 65e:	de b7       	in	r29, 0x3e	; 62
 660:	2d 97       	sbiw	r28, 0x0d	; 13
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	f8 94       	cli
 666:	de bf       	out	0x3e, r29	; 62
 668:	0f be       	out	0x3f, r0	; 63
 66a:	cd bf       	out	0x3d, r28	; 61
 66c:	3c 01       	movw	r6, r24
 66e:	7d 87       	std	Y+13, r23	; 0x0d
 670:	6c 87       	std	Y+12, r22	; 0x0c
 672:	5a 01       	movw	r10, r20
 674:	fc 01       	movw	r30, r24
 676:	17 82       	std	Z+7, r1	; 0x07
 678:	16 82       	std	Z+6, r1	; 0x06
 67a:	83 81       	ldd	r24, Z+3	; 0x03
 67c:	81 ff       	sbrs	r24, 1
 67e:	c8 c1       	rjmp	.+912    	; 0xa10 <vfprintf+0x3d8>
 680:	2e 01       	movw	r4, r28
 682:	08 94       	sec
 684:	41 1c       	adc	r4, r1
 686:	51 1c       	adc	r5, r1
 688:	f3 01       	movw	r30, r6
 68a:	93 81       	ldd	r25, Z+3	; 0x03
 68c:	ec 85       	ldd	r30, Y+12	; 0x0c
 68e:	fd 85       	ldd	r31, Y+13	; 0x0d
 690:	93 fd       	sbrc	r25, 3
 692:	85 91       	lpm	r24, Z+
 694:	93 ff       	sbrs	r25, 3
 696:	81 91       	ld	r24, Z+
 698:	fd 87       	std	Y+13, r31	; 0x0d
 69a:	ec 87       	std	Y+12, r30	; 0x0c
 69c:	88 23       	and	r24, r24
 69e:	09 f4       	brne	.+2      	; 0x6a2 <vfprintf+0x6a>
 6a0:	b3 c1       	rjmp	.+870    	; 0xa08 <vfprintf+0x3d0>
 6a2:	85 32       	cpi	r24, 0x25	; 37
 6a4:	41 f4       	brne	.+16     	; 0x6b6 <vfprintf+0x7e>
 6a6:	93 fd       	sbrc	r25, 3
 6a8:	85 91       	lpm	r24, Z+
 6aa:	93 ff       	sbrs	r25, 3
 6ac:	81 91       	ld	r24, Z+
 6ae:	fd 87       	std	Y+13, r31	; 0x0d
 6b0:	ec 87       	std	Y+12, r30	; 0x0c
 6b2:	85 32       	cpi	r24, 0x25	; 37
 6b4:	29 f4       	brne	.+10     	; 0x6c0 <vfprintf+0x88>
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	b3 01       	movw	r22, r6
 6ba:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 6be:	e4 cf       	rjmp	.-56     	; 0x688 <vfprintf+0x50>
 6c0:	ff 24       	eor	r15, r15
 6c2:	ee 24       	eor	r14, r14
 6c4:	10 e0       	ldi	r17, 0x00	; 0
 6c6:	10 32       	cpi	r17, 0x20	; 32
 6c8:	b0 f4       	brcc	.+44     	; 0x6f6 <vfprintf+0xbe>
 6ca:	8b 32       	cpi	r24, 0x2B	; 43
 6cc:	69 f0       	breq	.+26     	; 0x6e8 <vfprintf+0xb0>
 6ce:	8c 32       	cpi	r24, 0x2C	; 44
 6d0:	28 f4       	brcc	.+10     	; 0x6dc <vfprintf+0xa4>
 6d2:	80 32       	cpi	r24, 0x20	; 32
 6d4:	51 f0       	breq	.+20     	; 0x6ea <vfprintf+0xb2>
 6d6:	83 32       	cpi	r24, 0x23	; 35
 6d8:	71 f4       	brne	.+28     	; 0x6f6 <vfprintf+0xbe>
 6da:	0b c0       	rjmp	.+22     	; 0x6f2 <vfprintf+0xba>
 6dc:	8d 32       	cpi	r24, 0x2D	; 45
 6de:	39 f0       	breq	.+14     	; 0x6ee <vfprintf+0xb6>
 6e0:	80 33       	cpi	r24, 0x30	; 48
 6e2:	49 f4       	brne	.+18     	; 0x6f6 <vfprintf+0xbe>
 6e4:	11 60       	ori	r17, 0x01	; 1
 6e6:	2c c0       	rjmp	.+88     	; 0x740 <vfprintf+0x108>
 6e8:	12 60       	ori	r17, 0x02	; 2
 6ea:	14 60       	ori	r17, 0x04	; 4
 6ec:	29 c0       	rjmp	.+82     	; 0x740 <vfprintf+0x108>
 6ee:	18 60       	ori	r17, 0x08	; 8
 6f0:	27 c0       	rjmp	.+78     	; 0x740 <vfprintf+0x108>
 6f2:	10 61       	ori	r17, 0x10	; 16
 6f4:	25 c0       	rjmp	.+74     	; 0x740 <vfprintf+0x108>
 6f6:	17 fd       	sbrc	r17, 7
 6f8:	2e c0       	rjmp	.+92     	; 0x756 <vfprintf+0x11e>
 6fa:	28 2f       	mov	r18, r24
 6fc:	20 53       	subi	r18, 0x30	; 48
 6fe:	2a 30       	cpi	r18, 0x0A	; 10
 700:	98 f4       	brcc	.+38     	; 0x728 <vfprintf+0xf0>
 702:	16 ff       	sbrs	r17, 6
 704:	08 c0       	rjmp	.+16     	; 0x716 <vfprintf+0xde>
 706:	8f 2d       	mov	r24, r15
 708:	88 0f       	add	r24, r24
 70a:	f8 2e       	mov	r15, r24
 70c:	ff 0c       	add	r15, r15
 70e:	ff 0c       	add	r15, r15
 710:	f8 0e       	add	r15, r24
 712:	f2 0e       	add	r15, r18
 714:	15 c0       	rjmp	.+42     	; 0x740 <vfprintf+0x108>
 716:	8e 2d       	mov	r24, r14
 718:	88 0f       	add	r24, r24
 71a:	e8 2e       	mov	r14, r24
 71c:	ee 0c       	add	r14, r14
 71e:	ee 0c       	add	r14, r14
 720:	e8 0e       	add	r14, r24
 722:	e2 0e       	add	r14, r18
 724:	10 62       	ori	r17, 0x20	; 32
 726:	0c c0       	rjmp	.+24     	; 0x740 <vfprintf+0x108>
 728:	8e 32       	cpi	r24, 0x2E	; 46
 72a:	21 f4       	brne	.+8      	; 0x734 <vfprintf+0xfc>
 72c:	16 fd       	sbrc	r17, 6
 72e:	6c c1       	rjmp	.+728    	; 0xa08 <vfprintf+0x3d0>
 730:	10 64       	ori	r17, 0x40	; 64
 732:	06 c0       	rjmp	.+12     	; 0x740 <vfprintf+0x108>
 734:	8c 36       	cpi	r24, 0x6C	; 108
 736:	11 f4       	brne	.+4      	; 0x73c <vfprintf+0x104>
 738:	10 68       	ori	r17, 0x80	; 128
 73a:	02 c0       	rjmp	.+4      	; 0x740 <vfprintf+0x108>
 73c:	88 36       	cpi	r24, 0x68	; 104
 73e:	59 f4       	brne	.+22     	; 0x756 <vfprintf+0x11e>
 740:	ec 85       	ldd	r30, Y+12	; 0x0c
 742:	fd 85       	ldd	r31, Y+13	; 0x0d
 744:	93 fd       	sbrc	r25, 3
 746:	85 91       	lpm	r24, Z+
 748:	93 ff       	sbrs	r25, 3
 74a:	81 91       	ld	r24, Z+
 74c:	fd 87       	std	Y+13, r31	; 0x0d
 74e:	ec 87       	std	Y+12, r30	; 0x0c
 750:	88 23       	and	r24, r24
 752:	09 f0       	breq	.+2      	; 0x756 <vfprintf+0x11e>
 754:	b8 cf       	rjmp	.-144    	; 0x6c6 <vfprintf+0x8e>
 756:	98 2f       	mov	r25, r24
 758:	95 54       	subi	r25, 0x45	; 69
 75a:	93 30       	cpi	r25, 0x03	; 3
 75c:	18 f0       	brcs	.+6      	; 0x764 <vfprintf+0x12c>
 75e:	90 52       	subi	r25, 0x20	; 32
 760:	93 30       	cpi	r25, 0x03	; 3
 762:	38 f4       	brcc	.+14     	; 0x772 <vfprintf+0x13a>
 764:	24 e0       	ldi	r18, 0x04	; 4
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	a2 0e       	add	r10, r18
 76a:	b3 1e       	adc	r11, r19
 76c:	3f e3       	ldi	r19, 0x3F	; 63
 76e:	39 83       	std	Y+1, r19	; 0x01
 770:	0f c0       	rjmp	.+30     	; 0x790 <vfprintf+0x158>
 772:	83 36       	cpi	r24, 0x63	; 99
 774:	31 f0       	breq	.+12     	; 0x782 <vfprintf+0x14a>
 776:	83 37       	cpi	r24, 0x73	; 115
 778:	81 f0       	breq	.+32     	; 0x79a <vfprintf+0x162>
 77a:	83 35       	cpi	r24, 0x53	; 83
 77c:	09 f0       	breq	.+2      	; 0x780 <vfprintf+0x148>
 77e:	5a c0       	rjmp	.+180    	; 0x834 <vfprintf+0x1fc>
 780:	22 c0       	rjmp	.+68     	; 0x7c6 <vfprintf+0x18e>
 782:	f5 01       	movw	r30, r10
 784:	80 81       	ld	r24, Z
 786:	89 83       	std	Y+1, r24	; 0x01
 788:	22 e0       	ldi	r18, 0x02	; 2
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	a2 0e       	add	r10, r18
 78e:	b3 1e       	adc	r11, r19
 790:	21 e0       	ldi	r18, 0x01	; 1
 792:	c2 2e       	mov	r12, r18
 794:	d1 2c       	mov	r13, r1
 796:	42 01       	movw	r8, r4
 798:	14 c0       	rjmp	.+40     	; 0x7c2 <vfprintf+0x18a>
 79a:	92 e0       	ldi	r25, 0x02	; 2
 79c:	29 2e       	mov	r2, r25
 79e:	31 2c       	mov	r3, r1
 7a0:	2a 0c       	add	r2, r10
 7a2:	3b 1c       	adc	r3, r11
 7a4:	f5 01       	movw	r30, r10
 7a6:	80 80       	ld	r8, Z
 7a8:	91 80       	ldd	r9, Z+1	; 0x01
 7aa:	16 ff       	sbrs	r17, 6
 7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <vfprintf+0x17c>
 7ae:	6f 2d       	mov	r22, r15
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <vfprintf+0x180>
 7b4:	6f ef       	ldi	r22, 0xFF	; 255
 7b6:	7f ef       	ldi	r23, 0xFF	; 255
 7b8:	c4 01       	movw	r24, r8
 7ba:	0e 94 2e 05 	call	0xa5c	; 0xa5c <strnlen>
 7be:	6c 01       	movw	r12, r24
 7c0:	51 01       	movw	r10, r2
 7c2:	1f 77       	andi	r17, 0x7F	; 127
 7c4:	15 c0       	rjmp	.+42     	; 0x7f0 <vfprintf+0x1b8>
 7c6:	82 e0       	ldi	r24, 0x02	; 2
 7c8:	28 2e       	mov	r2, r24
 7ca:	31 2c       	mov	r3, r1
 7cc:	2a 0c       	add	r2, r10
 7ce:	3b 1c       	adc	r3, r11
 7d0:	f5 01       	movw	r30, r10
 7d2:	80 80       	ld	r8, Z
 7d4:	91 80       	ldd	r9, Z+1	; 0x01
 7d6:	16 ff       	sbrs	r17, 6
 7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <vfprintf+0x1a8>
 7da:	6f 2d       	mov	r22, r15
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <vfprintf+0x1ac>
 7e0:	6f ef       	ldi	r22, 0xFF	; 255
 7e2:	7f ef       	ldi	r23, 0xFF	; 255
 7e4:	c4 01       	movw	r24, r8
 7e6:	0e 94 23 05 	call	0xa46	; 0xa46 <strnlen_P>
 7ea:	6c 01       	movw	r12, r24
 7ec:	10 68       	ori	r17, 0x80	; 128
 7ee:	51 01       	movw	r10, r2
 7f0:	13 fd       	sbrc	r17, 3
 7f2:	1c c0       	rjmp	.+56     	; 0x82c <vfprintf+0x1f4>
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x1ca>
 7f6:	80 e2       	ldi	r24, 0x20	; 32
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	b3 01       	movw	r22, r6
 7fc:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 800:	ea 94       	dec	r14
 802:	8e 2d       	mov	r24, r14
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	c8 16       	cp	r12, r24
 808:	d9 06       	cpc	r13, r25
 80a:	a8 f3       	brcs	.-22     	; 0x7f6 <vfprintf+0x1be>
 80c:	0f c0       	rjmp	.+30     	; 0x82c <vfprintf+0x1f4>
 80e:	f4 01       	movw	r30, r8
 810:	17 fd       	sbrc	r17, 7
 812:	85 91       	lpm	r24, Z+
 814:	17 ff       	sbrs	r17, 7
 816:	81 91       	ld	r24, Z+
 818:	4f 01       	movw	r8, r30
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	b3 01       	movw	r22, r6
 81e:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 822:	e1 10       	cpse	r14, r1
 824:	ea 94       	dec	r14
 826:	08 94       	sec
 828:	c1 08       	sbc	r12, r1
 82a:	d1 08       	sbc	r13, r1
 82c:	c1 14       	cp	r12, r1
 82e:	d1 04       	cpc	r13, r1
 830:	71 f7       	brne	.-36     	; 0x80e <vfprintf+0x1d6>
 832:	e7 c0       	rjmp	.+462    	; 0xa02 <vfprintf+0x3ca>
 834:	84 36       	cpi	r24, 0x64	; 100
 836:	11 f0       	breq	.+4      	; 0x83c <vfprintf+0x204>
 838:	89 36       	cpi	r24, 0x69	; 105
 83a:	51 f5       	brne	.+84     	; 0x890 <vfprintf+0x258>
 83c:	f5 01       	movw	r30, r10
 83e:	17 ff       	sbrs	r17, 7
 840:	07 c0       	rjmp	.+14     	; 0x850 <vfprintf+0x218>
 842:	80 81       	ld	r24, Z
 844:	91 81       	ldd	r25, Z+1	; 0x01
 846:	a2 81       	ldd	r26, Z+2	; 0x02
 848:	b3 81       	ldd	r27, Z+3	; 0x03
 84a:	24 e0       	ldi	r18, 0x04	; 4
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	08 c0       	rjmp	.+16     	; 0x860 <vfprintf+0x228>
 850:	80 81       	ld	r24, Z
 852:	91 81       	ldd	r25, Z+1	; 0x01
 854:	aa 27       	eor	r26, r26
 856:	97 fd       	sbrc	r25, 7
 858:	a0 95       	com	r26
 85a:	ba 2f       	mov	r27, r26
 85c:	22 e0       	ldi	r18, 0x02	; 2
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	a2 0e       	add	r10, r18
 862:	b3 1e       	adc	r11, r19
 864:	01 2f       	mov	r16, r17
 866:	0f 76       	andi	r16, 0x6F	; 111
 868:	b7 ff       	sbrs	r27, 7
 86a:	08 c0       	rjmp	.+16     	; 0x87c <vfprintf+0x244>
 86c:	b0 95       	com	r27
 86e:	a0 95       	com	r26
 870:	90 95       	com	r25
 872:	81 95       	neg	r24
 874:	9f 4f       	sbci	r25, 0xFF	; 255
 876:	af 4f       	sbci	r26, 0xFF	; 255
 878:	bf 4f       	sbci	r27, 0xFF	; 255
 87a:	00 68       	ori	r16, 0x80	; 128
 87c:	bc 01       	movw	r22, r24
 87e:	cd 01       	movw	r24, r26
 880:	a2 01       	movw	r20, r4
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	0e 94 65 05 	call	0xaca	; 0xaca <__ultoa_invert>
 88a:	d8 2e       	mov	r13, r24
 88c:	d4 18       	sub	r13, r4
 88e:	3f c0       	rjmp	.+126    	; 0x90e <vfprintf+0x2d6>
 890:	85 37       	cpi	r24, 0x75	; 117
 892:	21 f4       	brne	.+8      	; 0x89c <vfprintf+0x264>
 894:	1f 7e       	andi	r17, 0xEF	; 239
 896:	2a e0       	ldi	r18, 0x0A	; 10
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	20 c0       	rjmp	.+64     	; 0x8dc <vfprintf+0x2a4>
 89c:	19 7f       	andi	r17, 0xF9	; 249
 89e:	8f 36       	cpi	r24, 0x6F	; 111
 8a0:	a9 f0       	breq	.+42     	; 0x8cc <vfprintf+0x294>
 8a2:	80 37       	cpi	r24, 0x70	; 112
 8a4:	20 f4       	brcc	.+8      	; 0x8ae <vfprintf+0x276>
 8a6:	88 35       	cpi	r24, 0x58	; 88
 8a8:	09 f0       	breq	.+2      	; 0x8ac <vfprintf+0x274>
 8aa:	ae c0       	rjmp	.+348    	; 0xa08 <vfprintf+0x3d0>
 8ac:	0b c0       	rjmp	.+22     	; 0x8c4 <vfprintf+0x28c>
 8ae:	80 37       	cpi	r24, 0x70	; 112
 8b0:	21 f0       	breq	.+8      	; 0x8ba <vfprintf+0x282>
 8b2:	88 37       	cpi	r24, 0x78	; 120
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <vfprintf+0x280>
 8b6:	a8 c0       	rjmp	.+336    	; 0xa08 <vfprintf+0x3d0>
 8b8:	01 c0       	rjmp	.+2      	; 0x8bc <vfprintf+0x284>
 8ba:	10 61       	ori	r17, 0x10	; 16
 8bc:	14 ff       	sbrs	r17, 4
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <vfprintf+0x29a>
 8c0:	14 60       	ori	r17, 0x04	; 4
 8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <vfprintf+0x29a>
 8c4:	14 ff       	sbrs	r17, 4
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <vfprintf+0x2a0>
 8c8:	16 60       	ori	r17, 0x06	; 6
 8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <vfprintf+0x2a0>
 8cc:	28 e0       	ldi	r18, 0x08	; 8
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	05 c0       	rjmp	.+10     	; 0x8dc <vfprintf+0x2a4>
 8d2:	20 e1       	ldi	r18, 0x10	; 16
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <vfprintf+0x2a4>
 8d8:	20 e1       	ldi	r18, 0x10	; 16
 8da:	32 e0       	ldi	r19, 0x02	; 2
 8dc:	f5 01       	movw	r30, r10
 8de:	17 ff       	sbrs	r17, 7
 8e0:	07 c0       	rjmp	.+14     	; 0x8f0 <vfprintf+0x2b8>
 8e2:	60 81       	ld	r22, Z
 8e4:	71 81       	ldd	r23, Z+1	; 0x01
 8e6:	82 81       	ldd	r24, Z+2	; 0x02
 8e8:	93 81       	ldd	r25, Z+3	; 0x03
 8ea:	44 e0       	ldi	r20, 0x04	; 4
 8ec:	50 e0       	ldi	r21, 0x00	; 0
 8ee:	06 c0       	rjmp	.+12     	; 0x8fc <vfprintf+0x2c4>
 8f0:	60 81       	ld	r22, Z
 8f2:	71 81       	ldd	r23, Z+1	; 0x01
 8f4:	80 e0       	ldi	r24, 0x00	; 0
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	42 e0       	ldi	r20, 0x02	; 2
 8fa:	50 e0       	ldi	r21, 0x00	; 0
 8fc:	a4 0e       	add	r10, r20
 8fe:	b5 1e       	adc	r11, r21
 900:	a2 01       	movw	r20, r4
 902:	0e 94 65 05 	call	0xaca	; 0xaca <__ultoa_invert>
 906:	d8 2e       	mov	r13, r24
 908:	d4 18       	sub	r13, r4
 90a:	01 2f       	mov	r16, r17
 90c:	0f 77       	andi	r16, 0x7F	; 127
 90e:	06 ff       	sbrs	r16, 6
 910:	09 c0       	rjmp	.+18     	; 0x924 <vfprintf+0x2ec>
 912:	0e 7f       	andi	r16, 0xFE	; 254
 914:	df 14       	cp	r13, r15
 916:	30 f4       	brcc	.+12     	; 0x924 <vfprintf+0x2ec>
 918:	04 ff       	sbrs	r16, 4
 91a:	06 c0       	rjmp	.+12     	; 0x928 <vfprintf+0x2f0>
 91c:	02 fd       	sbrc	r16, 2
 91e:	04 c0       	rjmp	.+8      	; 0x928 <vfprintf+0x2f0>
 920:	0f 7e       	andi	r16, 0xEF	; 239
 922:	02 c0       	rjmp	.+4      	; 0x928 <vfprintf+0x2f0>
 924:	1d 2d       	mov	r17, r13
 926:	01 c0       	rjmp	.+2      	; 0x92a <vfprintf+0x2f2>
 928:	1f 2d       	mov	r17, r15
 92a:	80 2f       	mov	r24, r16
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	04 ff       	sbrs	r16, 4
 930:	0c c0       	rjmp	.+24     	; 0x94a <vfprintf+0x312>
 932:	fe 01       	movw	r30, r28
 934:	ed 0d       	add	r30, r13
 936:	f1 1d       	adc	r31, r1
 938:	20 81       	ld	r18, Z
 93a:	20 33       	cpi	r18, 0x30	; 48
 93c:	11 f4       	brne	.+4      	; 0x942 <vfprintf+0x30a>
 93e:	09 7e       	andi	r16, 0xE9	; 233
 940:	09 c0       	rjmp	.+18     	; 0x954 <vfprintf+0x31c>
 942:	02 ff       	sbrs	r16, 2
 944:	06 c0       	rjmp	.+12     	; 0x952 <vfprintf+0x31a>
 946:	1e 5f       	subi	r17, 0xFE	; 254
 948:	05 c0       	rjmp	.+10     	; 0x954 <vfprintf+0x31c>
 94a:	86 78       	andi	r24, 0x86	; 134
 94c:	90 70       	andi	r25, 0x00	; 0
 94e:	00 97       	sbiw	r24, 0x00	; 0
 950:	09 f0       	breq	.+2      	; 0x954 <vfprintf+0x31c>
 952:	1f 5f       	subi	r17, 0xFF	; 255
 954:	80 2e       	mov	r8, r16
 956:	99 24       	eor	r9, r9
 958:	03 fd       	sbrc	r16, 3
 95a:	12 c0       	rjmp	.+36     	; 0x980 <vfprintf+0x348>
 95c:	00 ff       	sbrs	r16, 0
 95e:	0d c0       	rjmp	.+26     	; 0x97a <vfprintf+0x342>
 960:	fd 2c       	mov	r15, r13
 962:	1e 15       	cp	r17, r14
 964:	50 f4       	brcc	.+20     	; 0x97a <vfprintf+0x342>
 966:	fe 0c       	add	r15, r14
 968:	f1 1a       	sub	r15, r17
 96a:	1e 2d       	mov	r17, r14
 96c:	06 c0       	rjmp	.+12     	; 0x97a <vfprintf+0x342>
 96e:	80 e2       	ldi	r24, 0x20	; 32
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	b3 01       	movw	r22, r6
 974:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 978:	1f 5f       	subi	r17, 0xFF	; 255
 97a:	1e 15       	cp	r17, r14
 97c:	c0 f3       	brcs	.-16     	; 0x96e <vfprintf+0x336>
 97e:	04 c0       	rjmp	.+8      	; 0x988 <vfprintf+0x350>
 980:	1e 15       	cp	r17, r14
 982:	10 f4       	brcc	.+4      	; 0x988 <vfprintf+0x350>
 984:	e1 1a       	sub	r14, r17
 986:	01 c0       	rjmp	.+2      	; 0x98a <vfprintf+0x352>
 988:	ee 24       	eor	r14, r14
 98a:	84 fe       	sbrs	r8, 4
 98c:	0f c0       	rjmp	.+30     	; 0x9ac <vfprintf+0x374>
 98e:	80 e3       	ldi	r24, 0x30	; 48
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	b3 01       	movw	r22, r6
 994:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 998:	82 fe       	sbrs	r8, 2
 99a:	1f c0       	rjmp	.+62     	; 0x9da <vfprintf+0x3a2>
 99c:	81 fe       	sbrs	r8, 1
 99e:	03 c0       	rjmp	.+6      	; 0x9a6 <vfprintf+0x36e>
 9a0:	88 e5       	ldi	r24, 0x58	; 88
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	10 c0       	rjmp	.+32     	; 0x9c6 <vfprintf+0x38e>
 9a6:	88 e7       	ldi	r24, 0x78	; 120
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	0d c0       	rjmp	.+26     	; 0x9c6 <vfprintf+0x38e>
 9ac:	c4 01       	movw	r24, r8
 9ae:	86 78       	andi	r24, 0x86	; 134
 9b0:	90 70       	andi	r25, 0x00	; 0
 9b2:	00 97       	sbiw	r24, 0x00	; 0
 9b4:	91 f0       	breq	.+36     	; 0x9da <vfprintf+0x3a2>
 9b6:	81 fc       	sbrc	r8, 1
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <vfprintf+0x386>
 9ba:	80 e2       	ldi	r24, 0x20	; 32
 9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <vfprintf+0x388>
 9be:	8b e2       	ldi	r24, 0x2B	; 43
 9c0:	07 fd       	sbrc	r16, 7
 9c2:	8d e2       	ldi	r24, 0x2D	; 45
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	b3 01       	movw	r22, r6
 9c8:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <vfprintf+0x3a2>
 9ce:	80 e3       	ldi	r24, 0x30	; 48
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	b3 01       	movw	r22, r6
 9d4:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 9d8:	fa 94       	dec	r15
 9da:	df 14       	cp	r13, r15
 9dc:	c0 f3       	brcs	.-16     	; 0x9ce <vfprintf+0x396>
 9de:	da 94       	dec	r13
 9e0:	f2 01       	movw	r30, r4
 9e2:	ed 0d       	add	r30, r13
 9e4:	f1 1d       	adc	r31, r1
 9e6:	80 81       	ld	r24, Z
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	b3 01       	movw	r22, r6
 9ec:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 9f0:	dd 20       	and	r13, r13
 9f2:	a9 f7       	brne	.-22     	; 0x9de <vfprintf+0x3a6>
 9f4:	06 c0       	rjmp	.+12     	; 0xa02 <vfprintf+0x3ca>
 9f6:	80 e2       	ldi	r24, 0x20	; 32
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	b3 01       	movw	r22, r6
 9fc:	0e 94 39 05 	call	0xa72	; 0xa72 <fputc>
 a00:	ea 94       	dec	r14
 a02:	ee 20       	and	r14, r14
 a04:	c1 f7       	brne	.-16     	; 0x9f6 <vfprintf+0x3be>
 a06:	40 ce       	rjmp	.-896    	; 0x688 <vfprintf+0x50>
 a08:	f3 01       	movw	r30, r6
 a0a:	86 81       	ldd	r24, Z+6	; 0x06
 a0c:	97 81       	ldd	r25, Z+7	; 0x07
 a0e:	02 c0       	rjmp	.+4      	; 0xa14 <vfprintf+0x3dc>
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	9f ef       	ldi	r25, 0xFF	; 255
 a14:	2d 96       	adiw	r28, 0x0d	; 13
 a16:	0f b6       	in	r0, 0x3f	; 63
 a18:	f8 94       	cli
 a1a:	de bf       	out	0x3e, r29	; 62
 a1c:	0f be       	out	0x3f, r0	; 63
 a1e:	cd bf       	out	0x3d, r28	; 61
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	1f 91       	pop	r17
 a26:	0f 91       	pop	r16
 a28:	ff 90       	pop	r15
 a2a:	ef 90       	pop	r14
 a2c:	df 90       	pop	r13
 a2e:	cf 90       	pop	r12
 a30:	bf 90       	pop	r11
 a32:	af 90       	pop	r10
 a34:	9f 90       	pop	r9
 a36:	8f 90       	pop	r8
 a38:	7f 90       	pop	r7
 a3a:	6f 90       	pop	r6
 a3c:	5f 90       	pop	r5
 a3e:	4f 90       	pop	r4
 a40:	3f 90       	pop	r3
 a42:	2f 90       	pop	r2
 a44:	08 95       	ret

00000a46 <strnlen_P>:
 a46:	fc 01       	movw	r30, r24
 a48:	05 90       	lpm	r0, Z+
 a4a:	61 50       	subi	r22, 0x01	; 1
 a4c:	70 40       	sbci	r23, 0x00	; 0
 a4e:	01 10       	cpse	r0, r1
 a50:	d8 f7       	brcc	.-10     	; 0xa48 <strnlen_P+0x2>
 a52:	80 95       	com	r24
 a54:	90 95       	com	r25
 a56:	8e 0f       	add	r24, r30
 a58:	9f 1f       	adc	r25, r31
 a5a:	08 95       	ret

00000a5c <strnlen>:
 a5c:	fc 01       	movw	r30, r24
 a5e:	61 50       	subi	r22, 0x01	; 1
 a60:	70 40       	sbci	r23, 0x00	; 0
 a62:	01 90       	ld	r0, Z+
 a64:	01 10       	cpse	r0, r1
 a66:	d8 f7       	brcc	.-10     	; 0xa5e <strnlen+0x2>
 a68:	80 95       	com	r24
 a6a:	90 95       	com	r25
 a6c:	8e 0f       	add	r24, r30
 a6e:	9f 1f       	adc	r25, r31
 a70:	08 95       	ret

00000a72 <fputc>:
 a72:	0f 93       	push	r16
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	8c 01       	movw	r16, r24
 a7c:	eb 01       	movw	r28, r22
 a7e:	8b 81       	ldd	r24, Y+3	; 0x03
 a80:	81 ff       	sbrs	r24, 1
 a82:	1b c0       	rjmp	.+54     	; 0xaba <fputc+0x48>
 a84:	82 ff       	sbrs	r24, 2
 a86:	0d c0       	rjmp	.+26     	; 0xaa2 <fputc+0x30>
 a88:	2e 81       	ldd	r18, Y+6	; 0x06
 a8a:	3f 81       	ldd	r19, Y+7	; 0x07
 a8c:	8c 81       	ldd	r24, Y+4	; 0x04
 a8e:	9d 81       	ldd	r25, Y+5	; 0x05
 a90:	28 17       	cp	r18, r24
 a92:	39 07       	cpc	r19, r25
 a94:	64 f4       	brge	.+24     	; 0xaae <fputc+0x3c>
 a96:	e8 81       	ld	r30, Y
 a98:	f9 81       	ldd	r31, Y+1	; 0x01
 a9a:	01 93       	st	Z+, r16
 a9c:	f9 83       	std	Y+1, r31	; 0x01
 a9e:	e8 83       	st	Y, r30
 aa0:	06 c0       	rjmp	.+12     	; 0xaae <fputc+0x3c>
 aa2:	e8 85       	ldd	r30, Y+8	; 0x08
 aa4:	f9 85       	ldd	r31, Y+9	; 0x09
 aa6:	80 2f       	mov	r24, r16
 aa8:	19 95       	eicall
 aaa:	00 97       	sbiw	r24, 0x00	; 0
 aac:	31 f4       	brne	.+12     	; 0xaba <fputc+0x48>
 aae:	8e 81       	ldd	r24, Y+6	; 0x06
 ab0:	9f 81       	ldd	r25, Y+7	; 0x07
 ab2:	01 96       	adiw	r24, 0x01	; 1
 ab4:	9f 83       	std	Y+7, r25	; 0x07
 ab6:	8e 83       	std	Y+6, r24	; 0x06
 ab8:	02 c0       	rjmp	.+4      	; 0xabe <fputc+0x4c>
 aba:	0f ef       	ldi	r16, 0xFF	; 255
 abc:	1f ef       	ldi	r17, 0xFF	; 255
 abe:	c8 01       	movw	r24, r16
 ac0:	df 91       	pop	r29
 ac2:	cf 91       	pop	r28
 ac4:	1f 91       	pop	r17
 ac6:	0f 91       	pop	r16
 ac8:	08 95       	ret

00000aca <__ultoa_invert>:
 aca:	fa 01       	movw	r30, r20
 acc:	aa 27       	eor	r26, r26
 ace:	28 30       	cpi	r18, 0x08	; 8
 ad0:	51 f1       	breq	.+84     	; 0xb26 <__ultoa_invert+0x5c>
 ad2:	20 31       	cpi	r18, 0x10	; 16
 ad4:	81 f1       	breq	.+96     	; 0xb36 <__ultoa_invert+0x6c>
 ad6:	e8 94       	clt
 ad8:	6f 93       	push	r22
 ada:	6e 7f       	andi	r22, 0xFE	; 254
 adc:	6e 5f       	subi	r22, 0xFE	; 254
 ade:	7f 4f       	sbci	r23, 0xFF	; 255
 ae0:	8f 4f       	sbci	r24, 0xFF	; 255
 ae2:	9f 4f       	sbci	r25, 0xFF	; 255
 ae4:	af 4f       	sbci	r26, 0xFF	; 255
 ae6:	b1 e0       	ldi	r27, 0x01	; 1
 ae8:	3e d0       	rcall	.+124    	; 0xb66 <__ultoa_invert+0x9c>
 aea:	b4 e0       	ldi	r27, 0x04	; 4
 aec:	3c d0       	rcall	.+120    	; 0xb66 <__ultoa_invert+0x9c>
 aee:	67 0f       	add	r22, r23
 af0:	78 1f       	adc	r23, r24
 af2:	89 1f       	adc	r24, r25
 af4:	9a 1f       	adc	r25, r26
 af6:	a1 1d       	adc	r26, r1
 af8:	68 0f       	add	r22, r24
 afa:	79 1f       	adc	r23, r25
 afc:	8a 1f       	adc	r24, r26
 afe:	91 1d       	adc	r25, r1
 b00:	a1 1d       	adc	r26, r1
 b02:	6a 0f       	add	r22, r26
 b04:	71 1d       	adc	r23, r1
 b06:	81 1d       	adc	r24, r1
 b08:	91 1d       	adc	r25, r1
 b0a:	a1 1d       	adc	r26, r1
 b0c:	20 d0       	rcall	.+64     	; 0xb4e <__ultoa_invert+0x84>
 b0e:	09 f4       	brne	.+2      	; 0xb12 <__ultoa_invert+0x48>
 b10:	68 94       	set
 b12:	3f 91       	pop	r19
 b14:	2a e0       	ldi	r18, 0x0A	; 10
 b16:	26 9f       	mul	r18, r22
 b18:	11 24       	eor	r1, r1
 b1a:	30 19       	sub	r19, r0
 b1c:	30 5d       	subi	r19, 0xD0	; 208
 b1e:	31 93       	st	Z+, r19
 b20:	de f6       	brtc	.-74     	; 0xad8 <__ultoa_invert+0xe>
 b22:	cf 01       	movw	r24, r30
 b24:	08 95       	ret
 b26:	46 2f       	mov	r20, r22
 b28:	47 70       	andi	r20, 0x07	; 7
 b2a:	40 5d       	subi	r20, 0xD0	; 208
 b2c:	41 93       	st	Z+, r20
 b2e:	b3 e0       	ldi	r27, 0x03	; 3
 b30:	0f d0       	rcall	.+30     	; 0xb50 <__ultoa_invert+0x86>
 b32:	c9 f7       	brne	.-14     	; 0xb26 <__ultoa_invert+0x5c>
 b34:	f6 cf       	rjmp	.-20     	; 0xb22 <__ultoa_invert+0x58>
 b36:	46 2f       	mov	r20, r22
 b38:	4f 70       	andi	r20, 0x0F	; 15
 b3a:	40 5d       	subi	r20, 0xD0	; 208
 b3c:	4a 33       	cpi	r20, 0x3A	; 58
 b3e:	18 f0       	brcs	.+6      	; 0xb46 <__ultoa_invert+0x7c>
 b40:	49 5d       	subi	r20, 0xD9	; 217
 b42:	31 fd       	sbrc	r19, 1
 b44:	40 52       	subi	r20, 0x20	; 32
 b46:	41 93       	st	Z+, r20
 b48:	02 d0       	rcall	.+4      	; 0xb4e <__ultoa_invert+0x84>
 b4a:	a9 f7       	brne	.-22     	; 0xb36 <__ultoa_invert+0x6c>
 b4c:	ea cf       	rjmp	.-44     	; 0xb22 <__ultoa_invert+0x58>
 b4e:	b4 e0       	ldi	r27, 0x04	; 4
 b50:	a6 95       	lsr	r26
 b52:	97 95       	ror	r25
 b54:	87 95       	ror	r24
 b56:	77 95       	ror	r23
 b58:	67 95       	ror	r22
 b5a:	ba 95       	dec	r27
 b5c:	c9 f7       	brne	.-14     	; 0xb50 <__ultoa_invert+0x86>
 b5e:	00 97       	sbiw	r24, 0x00	; 0
 b60:	61 05       	cpc	r22, r1
 b62:	71 05       	cpc	r23, r1
 b64:	08 95       	ret
 b66:	9b 01       	movw	r18, r22
 b68:	ac 01       	movw	r20, r24
 b6a:	0a 2e       	mov	r0, r26
 b6c:	06 94       	lsr	r0
 b6e:	57 95       	ror	r21
 b70:	47 95       	ror	r20
 b72:	37 95       	ror	r19
 b74:	27 95       	ror	r18
 b76:	ba 95       	dec	r27
 b78:	c9 f7       	brne	.-14     	; 0xb6c <__ultoa_invert+0xa2>
 b7a:	62 0f       	add	r22, r18
 b7c:	73 1f       	adc	r23, r19
 b7e:	84 1f       	adc	r24, r20
 b80:	95 1f       	adc	r25, r21
 b82:	a0 1d       	adc	r26, r0
 b84:	08 95       	ret

00000b86 <_exit>:
 b86:	f8 94       	cli

00000b88 <__stop_program>:
 b88:	ff cf       	rjmp	.-2      	; 0xb88 <__stop_program>
